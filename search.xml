<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>corn表达式</title>
      <link href="/2018/07/30/corn%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2018/07/30/corn%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h5 id="熟悉Linux或者后端开发的同学一定都遇到过执行定时任务的需求，其实不管是Linux下的corntab命令，还是Spring下-Scheduled注解，亦或是Quartz以及其他语言中的定时任务框架，都使用的是类似corn语法的表达式，所以了解corn表达式的语法是很有必要的。"><a href="#熟悉Linux或者后端开发的同学一定都遇到过执行定时任务的需求，其实不管是Linux下的corntab命令，还是Spring下-Scheduled注解，亦或是Quartz以及其他语言中的定时任务框架，都使用的是类似corn语法的表达式，所以了解corn表达式的语法是很有必要的。" class="headerlink" title="熟悉Linux或者后端开发的同学一定都遇到过执行定时任务的需求，其实不管是Linux下的corntab命令，还是Spring下@Scheduled注解，亦或是Quartz以及其他语言中的定时任务框架，都使用的是类似corn语法的表达式，所以了解corn表达式的语法是很有必要的。"></a>熟悉Linux或者后端开发的同学一定都遇到过执行定时任务的需求，其实不管是Linux下的corntab命令，还是Spring下@Scheduled注解，亦或是Quartz以及其他语言中的定时任务框架，都使用的是类似corn语法的表达式，所以了解corn表达式的语法是很有必要的。</h5><h5 id="在了解了corn的表达式语法后可以做些什么："><a href="#在了解了corn的表达式语法后可以做些什么：" class="headerlink" title="在了解了corn的表达式语法后可以做些什么："></a>在了解了corn的表达式语法后可以做些什么：</h5><ul><li><strong>Linux，树莓派，软路由通过配置corntab来执行shell用以定时备份数据库，如果你对抓包很熟悉，你就可以通过抓包来实现某些网站的定时自动签到，我最近就有写PT站自动签到的计划。</strong></li><li><strong>在使用Spring的@Scheduled注解，Quartz，或是其他语言的定时任务框架时，就是小Case了。</strong></li></ul><h5 id="我用corn做了什么："><a href="#我用corn做了什么：" class="headerlink" title="我用corn做了什么："></a>我用corn做了什么：</h5><ul><li><strong>最近我负责的后端项目，有一个需求是定时去请求某个接口获取数据，然后再进行统计分析。</strong></li><li><strong>由于我在大学提供的办公室里上班，没有拉宽带的权限，所以只能使用校园网的Portal认证来上网，但是电脑上登录了账号，手机就不能再登录了；前后端联调的时候也无法通过路由器组建局域网，每天上班第一件事都是登录网页认证这个事我自然无法忍受，所以我写了一个shell脚本自动验证，这样只要执行下脚本就实现了一步认证，再也不用手动打开网页输入账号密码了；而且这个shell脚本只要稍稍改下就可以在路由器上使用，上周末的时候我就动手把X讯的K2路由器刷了OpenWRT，然后安装了curl，最后把脚本scp到路由器里，然后通过corntab建了一个定时任务执行脚本，完美的实现了通过路由器来认证校园网。</strong></li></ul><h3 id="corn表达式："><a href="#corn表达式：" class="headerlink" title="corn表达式："></a>corn表达式：</h3><h5 id="结构：从左到右-空格隔开-：秒-分-时-日-月-星期-年份-年份可选"><a href="#结构：从左到右-空格隔开-：秒-分-时-日-月-星期-年份-年份可选" class="headerlink" title="结构：从左到右(空格隔开)：秒 分 时 日 月 星期 年份(年份可选)"></a>结构：从左到右(空格隔开)：秒 分 时 日 月 星期 年份(年份可选)</h5><h5 id="字段含义："><a href="#字段含义：" class="headerlink" title="字段含义："></a>字段含义：</h5><table><thead><tr><th>字段</th><th>允许值</th><th>允许的特殊字符</th></tr></thead><tbody><tr><td>秒（<em>Seconds</em>）</td><td>0~59</td><td>, - * /</td></tr><tr><td>分（<em>Minutes</em>）</td><td>0~59</td><td>, - * /</td></tr><tr><td>小时（<em>Hours</em>）</td><td>0~23</td><td>, - * /</td></tr><tr><td>日期（<em>DayofMonth</em>）</td><td>1~31</td><td>,- * ? / L W C</td></tr><tr><td>月份（<em>Month</em>）</td><td>1~12或英文月份简写</td><td>, - * /</td></tr><tr><td>星期（<em>DayofWeek</em>）</td><td>1~7或英文星期简写(1代表周日)</td><td>, - * ? / L C #</td></tr><tr><td>年(可选，留空)（<em>Year</em>）</td><td>1970~2099</td><td>, - * /</td></tr></tbody></table><h5 id="常用表达式样例："><a href="#常用表达式样例：" class="headerlink" title="常用表达式样例："></a>常用表达式样例：</h5><table><thead><tr><th>表达式</th><th>含义</th></tr></thead><tbody><tr><td><strong>0 0 2 1 * ? *</strong></td><td>表示在每月的1日的凌晨2点</td></tr><tr><td><strong>0 15 10 ? * MON-FRI</strong></td><td>表示周一到周五每天上午10:15</td></tr><tr><td><strong>0 15 10 ? 6L 2002-2006</strong></td><td>表示2002-2006年的每个月的最后一个星期五上午10:15</td></tr><tr><td><strong>0 0 10,14,16 * * ?</strong></td><td>每天上午10点，下午2点，4点</td></tr><tr><td><strong>0 0/30 9-17 * * ?</strong></td><td>朝九晚五工作时间内每半小时</td></tr><tr><td><strong>0 0 12 ? * WED</strong></td><td>表示每个星期三中午12点</td></tr><tr><td><strong>0 0 12 * * ?</strong></td><td>每天中午12点触发</td></tr><tr><td><strong>0 15 10 ? * *</strong></td><td>每天上午10:15触发</td></tr><tr><td><strong>0 15 10 * * ?</strong></td><td>每天上午10:15触发</td></tr><tr><td><strong>0 15 10 * <em> ? </em></strong></td><td>每天上午10:15触发</td></tr><tr><td><strong>0 15 10 * * ? 2005</strong></td><td>2005年的每天上午10:15触发</td></tr><tr><td><strong>0 * 14 <em> </em> ?</strong></td><td>在每天下午2点到下午2:59期间的每1分钟触发</td></tr><tr><td><strong>0 0/5 14 * * ?</strong></td><td>在每天下午2点到下午2:55期间的每5分钟触发</td></tr><tr><td><strong>0 0/5 14,18 * * ?</strong></td><td>在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</td></tr><tr><td><strong>0 0-5 14 * * ?</strong></td><td>在每天下午2点到下午2:05期间的每1分钟触发</td></tr><tr><td><strong>0 10,44 14 ? 3 WED</strong></td><td>每年三月的星期三的下午2:10和2:44触发</td></tr><tr><td><strong>0 15 10 ? * MON-FRI</strong></td><td>周一至周五的上午10:15触发</td></tr><tr><td><strong>0 15 10 15 * ?</strong></td><td>每月15日上午10:15触发</td></tr><tr><td><strong>0 15 10 L * ?</strong></td><td>每月最后一日的上午10:15触发</td></tr><tr><td><strong>0 15 10 ? * 6L</strong></td><td>每月的最后一个星期五上午10:15触发</td></tr><tr><td><strong>0 15 10 ? * 6L 2002-2005</strong></td><td>2002年至2005年的每月的最后一个星期五上午10:15触发</td></tr><tr><td><strong>0 15 10 ? * 6#3</strong></td><td>每月的第三个星期五上午10:15触发</td></tr></tbody></table><h5 id="其实上述的表达式只要做到随用随查就好，所以最好大家都收藏或者记录下。"><a href="#其实上述的表达式只要做到随用随查就好，所以最好大家都收藏或者记录下。" class="headerlink" title="其实上述的表达式只要做到随用随查就好，所以最好大家都收藏或者记录下。"></a>其实上述的表达式只要做到随用随查就好，所以最好大家都收藏或者记录下。</h5>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> corntab,corn,定时任务 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ESXi下安装Lede软路由</title>
      <link href="/2018/07/26/ESXi%E4%B8%8B%E5%AE%89%E8%A3%85Lede%E8%BD%AF%E8%B7%AF%E7%94%B1/"/>
      <url>/2018/07/26/ESXi%E4%B8%8B%E5%AE%89%E8%A3%85Lede%E8%BD%AF%E8%B7%AF%E7%94%B1/</url>
      <content type="html"><![CDATA[<h5 id="上个月把家里的gen8升级到e3-1230-v2和16G-ECC内存，顺便趁着618新入了一块4T的NAS红盘，为的就是能愉快的玩虚拟化。"><a href="#上个月把家里的gen8升级到e3-1230-v2和16G-ECC内存，顺便趁着618新入了一块4T的NAS红盘，为的就是能愉快的玩虚拟化。" class="headerlink" title="上个月把家里的gen8升级到e3 1230 v2和16G ECC内存，顺便趁着618新入了一块4T的NAS红盘，为的就是能愉快的玩虚拟化。"></a>上个月把家里的gen8升级到e3 1230 v2和16G ECC内存，顺便趁着618新入了一块4T的NAS红盘，为的就是能愉快的玩虚拟化。</h5><h5 id="现在家里的gen8已经安装好ESXi-6-5，并且跑着一个Ubuntu16-04和一个群晖6-5。虽然gen8只是微型服务器，但是仅仅跑这两个虚拟机还是绰绰有余的，剩余的技能完全足够再开一个软路由和一台Ubuntu18-04来玩爽了。"><a href="#现在家里的gen8已经安装好ESXi-6-5，并且跑着一个Ubuntu16-04和一个群晖6-5。虽然gen8只是微型服务器，但是仅仅跑这两个虚拟机还是绰绰有余的，剩余的技能完全足够再开一个软路由和一台Ubuntu18-04来玩爽了。" class="headerlink" title="现在家里的gen8已经安装好ESXi 6.5，并且跑着一个Ubuntu16.04和一个群晖6.5。虽然gen8只是微型服务器，但是仅仅跑这两个虚拟机还是绰绰有余的，剩余的技能完全足够再开一个软路由和一台Ubuntu18.04来玩爽了。"></a>现在家里的gen8已经安装好ESXi 6.5，并且跑着一个Ubuntu16.04和一个群晖6.5。虽然gen8只是微型服务器，但是仅仅跑这两个虚拟机还是绰绰有余的，剩余的技能完全足够再开一个软路由和一台Ubuntu18.04来玩爽了。</h5><h5 id="昨晚已经收到在深水宝买的8口千兆交换机，支持网管和链路聚合。"><a href="#昨晚已经收到在深水宝买的8口千兆交换机，支持网管和链路聚合。" class="headerlink" title="昨晚已经收到在深水宝买的8口千兆交换机，支持网管和链路聚合。"></a>昨晚已经收到在深水宝买的8口千兆交换机，支持网管和链路聚合。</h5><h5 id="先说下我使用软路由的需求，基本跟我使用梅林的需求一样，因为现在家里使用的是网件的路由器刷的梅林固件，我使用的插件主要有："><a href="#先说下我使用软路由的需求，基本跟我使用梅林的需求一样，因为现在家里使用的是网件的路由器刷的梅林固件，我使用的插件主要有：" class="headerlink" title="先说下我使用软路由的需求，基本跟我使用梅林的需求一样，因为现在家里使用的是网件的路由器刷的梅林固件，我使用的插件主要有："></a>先说下我使用软路由的需求，基本跟我使用梅林的需求一样，因为现在家里使用的是网件的路由器刷的梅林固件，我使用的插件主要有：</h5><ul><li><p><strong><em>酸酸乳</em></strong>(你懂得，走GFW List模式，畅游真正的互联网)</p></li><li><p><strong><em>KoolProxy</em></strong>(过滤广告，看个视频要一分多钟的广告，你能忍吗)</p></li><li><p><strong><em>Aliddns</em></strong>(有公网IP谁还用花生壳和Ngrok)</p></li><li><p><strong><em>自动签到</em></strong>(支持的大多数主流网站，但是不支持PT站，所以后面打算自己写PT站自动签到的shell，通过corntab来执行)</p></li></ul><h5 id="至于为什么要切换到软路由呢，主要就是R6400每次开启KoolProxy都会造成网速慢很多，有时候连图片都加载不出来，我猜测可能是R6400机能太弱或者KoolProxy优化的不好的原因，切到软路由的话，R6400只要专心的做一个AP就好了。"><a href="#至于为什么要切换到软路由呢，主要就是R6400每次开启KoolProxy都会造成网速慢很多，有时候连图片都加载不出来，我猜测可能是R6400机能太弱或者KoolProxy优化的不好的原因，切到软路由的话，R6400只要专心的做一个AP就好了。" class="headerlink" title="至于为什么要切换到软路由呢，主要就是R6400每次开启KoolProxy都会造成网速慢很多，有时候连图片都加载不出来，我猜测可能是R6400机能太弱或者KoolProxy优化的不好的原因，切到软路由的话，R6400只要专心的做一个AP就好了。"></a>至于为什么要切换到软路由呢，主要就是R6400每次开启KoolProxy都会造成网速慢很多，有时候连图片都加载不出来，我猜测可能是R6400机能太弱或者KoolProxy优化的不好的原因，切到软路由的话，R6400只要专心的做一个AP就好了。</h5><h5 id="上网调研了一下，目前软路由主要有Lede，爱快，海蜘蛛等等，最终我选择的是Lede。"><a href="#上网调研了一下，目前软路由主要有Lede，爱快，海蜘蛛等等，最终我选择的是Lede。" class="headerlink" title="上网调研了一下，目前软路由主要有Lede，爱快，海蜘蛛等等，最终我选择的是Lede。"></a>上网调研了一下，目前软路由主要有Lede，爱快，海蜘蛛等等，最终我选择的是Lede。</h5><h5 id="其实Lede也就是现在的OpenWRT，因为又合并到一起了。😂"><a href="#其实Lede也就是现在的OpenWRT，因为又合并到一起了。😂" class="headerlink" title="其实Lede也就是现在的OpenWRT，因为又合并到一起了。😂"></a>其实Lede也就是现在的OpenWRT，因为又合并到一起了。😂</h5><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol><li><p>打开固件<a href="http://firmware.koolshare.cn/LEDE_X64_fw867/%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BD%AC%E7%9B%98%E6%88%96PE%E4%B8%8B%E5%86%99%E7%9B%98%E4%B8%93%E7%94%A8/" target="_blank" rel="noopener">下载链接</a>，选择版本，我下载的是v2.6的版本，下载后解压出img文件。但是安装完之后我才知道Lede已经合并回OpenWrt，所以你可以直接下载OpenWrt的2.15版本。</p></li><li><p>下载StarWind V2V Converter并安装，打开后</p><p><img src="/img/lede/1.png" alt="1"><br><img src="/img/lede/2.png" alt="2"></p><p><img src="/img/lede/3.png" alt="3"></p><p><img src="/img/lede/4.png" alt="4"></p><p><img src="/img/lede/5.png" alt="5"></p><p><img src="/img/lede/6.png" alt="6"></p><p><img src="/img/lede/7.png" alt="7"></p><p>生成了2个文件，这时候登录ESXi的web管理界面，在数据存储浏览器中将刚才生成的文件上传进去，上传完成之后你会发现两个文件变成了一个，这是正常的。</p></li><li><p>在web界面的网络节点中选中vSwitch0，然后点击右边的编辑设置，按下图设置好保存：</p><p><img src="/img/lede/s1.png" alt="s1"></p></li><li><p>添加一个新的虚拟交换机vSwitch1，按下图设置后点击添加：</p><p><img src="/img/lede/s2.png" alt="s2"></p></li><li><p>添加端口组，并关联至vSwitch1，如下图：</p><p><img src="/img/lede/s3.png" alt="s3"></p></li><li><p>注册新的虚拟机，选择<strong>Linux类型</strong>，操作系统选择“<strong>其他Linux 64位</strong>”，删掉默认分配的硬盘，选择我们刚才上传的<strong>lede-v2.6.vmdk</strong>，然后添加新的网络适配器并选择刚才创建的<strong>VM Network1</strong>，然后保存。</p></li><li><p>此时先选中刚刚创建好的lede虚拟机右键—&gt;自动启动—&gt;开启。</p></li><li><p>这时候主要打开虚拟机的电源就好了，然后查看控制台，直到控制台不在刷新的时候敲一下回车，你会看到下图：</p><p><img src="/img/lede/l1.png" alt="l1"></p></li><li><p>距离成功只差一步了，那就是设置路由器的LAN IP ，控制台上键入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/config</span><br><span class="line">cp network network.bak</span><br><span class="line">vim /etc/config/network</span><br></pre></td></tr></table></figure><p>上述代码的第二步是为了备份配置文件，出错的时候只有恢复下即可，紧接着就是修改IP了，我设置的<code>192.168.0.1</code>，当然你可以根据自己的喜好设置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">config interface <span class="string">'loopback'</span></span><br><span class="line">option ifname <span class="string">'lo'</span></span><br><span class="line">option proto <span class="string">'static'</span></span><br><span class="line">option ipaddr <span class="string">'127.0.0.1'</span></span><br><span class="line">option netmask <span class="string">'255.0.0.0'</span></span><br><span class="line"></span><br><span class="line">config globals <span class="string">'globals'</span></span><br><span class="line">option ula_prefix <span class="string">'fd07:0156:b6bb::/48'</span></span><br><span class="line"></span><br><span class="line">config interface <span class="string">'lan'</span></span><br><span class="line">option <span class="built_in">type</span> <span class="string">'bridge'</span></span><br><span class="line">option ifname <span class="string">'eth0 eth1 eth2 eth3'</span></span><br><span class="line">option proto <span class="string">'static'</span></span><br><span class="line">option ipaddr <span class="string">'192.168.0.1'</span></span><br><span class="line">option netmask <span class="string">'255.255.255.0'</span></span><br><span class="line">option ip6assign <span class="string">'60'</span></span><br><span class="line"></span><br><span class="line">config interface <span class="string">'wan'</span></span><br><span class="line">option ifname <span class="string">'eth4'</span></span><br><span class="line">option proto <span class="string">'dhcp'</span></span><br><span class="line"></span><br><span class="line">config interface <span class="string">'wan6'</span></span><br><span class="line">option ifname <span class="string">'eth4'</span></span><br><span class="line">option proto <span class="string">'dhcpv6'</span></span><br></pre></td></tr></table></figure><p>设置好LAN IP后，还需要重启网络服务，键入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/network restart</span><br></pre></td></tr></table></figure></li><li><p>万事俱备只欠东风了，最后就是访问<a href="http://192.168.0.1" target="_blank" rel="noopener">http://192.168.0.1</a> ，如果让提示让你输入密码，恭喜你，Lede安装完成，如下图所示：</p><p><img src="/img/lede/l2.png" alt="l2"></p></li></ol>]]></content>
      
      <categories>
          
          <category> ESXi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESXi,Lede,软路由,OpenWRT </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>http返回200,status却是failed</title>
      <link href="/2018/07/25/http%E8%BF%94%E5%9B%9E200-status%E5%8D%B4%E6%98%AFfailed/"/>
      <url>/2018/07/25/http%E8%BF%94%E5%9B%9E200-status%E5%8D%B4%E6%98%AFfailed/</url>
      <content type="html"><![CDATA[<p><strong>今天刚到公司，就有前端同学说刚部署的前端代码在访问的时候网页一篇空白，我部署了一版一看，还真是这样，再三确认前端同学在本地构建并访问没有任何问题，紧接着微信就响起来了，其他兄弟公司的项目也都出了问题，我赶紧打开网页查看，果然所有网页都是空白，更神奇的是Chrome报了如下的问题：</strong></p><p><img src="/img/za/1.jpeg" alt="status显示failed"><br><img src="/img/za/2.jpeg" alt="http code显示200"><br><strong>文档状态显示failed，但是http状态码确是200。😂</strong><br><strong>这真是奇了怪了，我问后端同学也没人见过这样的问题。</strong></p><p><strong>紧接着我去查看Nginx的log，也没发现什么问题。这时候微信和电话已经开始轮番轰炸了，大家都在问项目怎么访问不了。最后只得一级一级的排查，在最后ssh登录网关机查看Nginx的时候，我刚输入<code>cd</code>，再按tab键补全路径的时候，系统显示如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cannot create temp file <span class="keyword">for</span> here-document: No space left on device</span><br></pre></td></tr></table></figure><p><strong>原来是磁盘空间不足了，所以Nginx无法完成中转，直觉告诉我应该是系统内的Docker镜像太多了，当键入<code>docker images</code>的时候，好么，果然问题在这，再删除了一些不用的镜像后，问题解决，所有网站恢复正常。</strong></p>]]></content>
      
      <categories>
          
          <category> 疑难杂症 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 疑难杂症 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Node小提示</title>
      <link href="/2018/07/23/Node%E5%B0%8F%E6%8F%90%E7%A4%BA/"/>
      <url>/2018/07/23/Node%E5%B0%8F%E6%8F%90%E7%A4%BA/</url>
      <content type="html"><![CDATA[<h5 id="在做开发的过程中，经常会遇到一些场景使用到Node，比如构建前端项目或者使用Hexo写博客，这批文章主要记录我在使用Node过程中遇到的一些问题和解决方案。"><a href="#在做开发的过程中，经常会遇到一些场景使用到Node，比如构建前端项目或者使用Hexo写博客，这批文章主要记录我在使用Node过程中遇到的一些问题和解决方案。" class="headerlink" title="在做开发的过程中，经常会遇到一些场景使用到Node，比如构建前端项目或者使用Hexo写博客，这批文章主要记录我在使用Node过程中遇到的一些问题和解决方案。"></a>在做开发的过程中，经常会遇到一些场景使用到Node，比如构建前端项目或者使用Hexo写博客，这批文章主要记录我在使用Node过程中遇到的一些问题和解决方案。</h5><h1 id="NPM相关"><a href="#NPM相关" class="headerlink" title="NPM相关"></a>NPM相关</h1><h5 id="使用Node就必不可少的会使用到npm，但是因为一些你知我知的原因，我们的网络访问npm的速度是很感人的，通常我们会选择使用cnpm来加速。"><a href="#使用Node就必不可少的会使用到npm，但是因为一些你知我知的原因，我们的网络访问npm的速度是很感人的，通常我们会选择使用cnpm来加速。" class="headerlink" title="使用Node就必不可少的会使用到npm，但是因为一些你知我知的原因，我们的网络访问npm的速度是很感人的，通常我们会选择使用cnpm来加速。"></a>使用Node就必不可少的会使用到npm，但是因为一些你知我知的原因，我们的网络访问npm的速度是很感人的，通常我们会选择使用cnpm来加速。</h5><h3 id="cnpm："><a href="#cnpm：" class="headerlink" title="cnpm："></a>cnpm：</h3><h5 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h5 id="之后我们在执行npm命令时，只要将npm替换为cnpm即可。"><a href="#之后我们在执行npm命令时，只要将npm替换为cnpm即可。" class="headerlink" title="之后我们在执行npm命令时，只要将npm替换为cnpm即可。"></a>之后我们在执行npm命令时，只要将npm替换为cnpm即可。</h5><h5 id="原命令："><a href="#原命令：" class="headerlink" title="原命令："></a>原命令：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i//npm install的简写</span><br></pre></td></tr></table></figure><h5 id="现命令："><a href="#现命令：" class="headerlink" title="现命令："></a>现命令：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i//cnpm install的简写</span><br></pre></td></tr></table></figure><h3 id="yarn"><a href="#yarn" class="headerlink" title="yarn:"></a>yarn:</h3><h5 id="yarn是我最喜欢的工具，也是我一直在用的。"><a href="#yarn是我最喜欢的工具，也是我一直在用的。" class="headerlink" title="yarn是我最喜欢的工具，也是我一直在用的。"></a>yarn是我最喜欢的工具，也是我一直在用的。</h5><h5 id="安装yarn，Ubuntu的安装命令："><a href="#安装yarn，Ubuntu的安装命令：" class="headerlink" title="安装yarn，Ubuntu的安装命令："></a>安装yarn，Ubuntu的安装命令：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb https://dl.yarnpkg.com/debian/ stable main"</span> | sudo tee /etc/apt/sources.list.d/yarn.list</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install yarn</span><br></pre></td></tr></table></figure><h5 id="Mac的安装命令："><a href="#Mac的安装命令：" class="headerlink" title="Mac的安装命令："></a>Mac的安装命令：</h5><ul><li>通过Homebrew：    <code>brew install yarn</code>  </li><li>通过Port：    <code>sudo port install yarn</code></li></ul><h5 id="安装完成后执行yarn-version即可查看版本信息。"><a href="#安装完成后执行yarn-version即可查看版本信息。" class="headerlink" title="安装完成后执行yarn --version即可查看版本信息。"></a>安装完成后执行<code>yarn --version</code>即可查看版本信息。</h5><h5 id="然后用yarn命令代替npm即可。"><a href="#然后用yarn命令代替npm即可。" class="headerlink" title="然后用yarn命令代替npm即可。"></a>然后用yarn命令代替npm即可。</h5><h5 id="原命令"><a href="#原命令" class="headerlink" title="原命令:"></a>原命令:</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h5 id="现命令：-1"><a href="#现命令：-1" class="headerlink" title="现命令："></a>现命令：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn//连install和i都省了😁</span><br></pre></td></tr></table></figure><h4 id="yarn小技巧："><a href="#yarn小技巧：" class="headerlink" title="yarn小技巧："></a>yarn小技巧：</h4><h5 id="用淘宝的源替换yarn的官方源："><a href="#用淘宝的源替换yarn的官方源：" class="headerlink" title="用淘宝的源替换yarn的官方源："></a>用淘宝的源替换yarn的官方源：</h5><h5 id="执行yarn-config-get-registry我们可以发现yarn的官方源是https-registry-yarnpkg-com，我们执行yarn-config-set-registry-https-registry-npm-taobao-org。这样一来yarn安装依赖的速度会快很多。"><a href="#执行yarn-config-get-registry我们可以发现yarn的官方源是https-registry-yarnpkg-com，我们执行yarn-config-set-registry-https-registry-npm-taobao-org。这样一来yarn安装依赖的速度会快很多。" class="headerlink" title="执行yarn config get registry我们可以发现yarn的官方源是https://registry.yarnpkg.com，我们执行yarn config set registry https://registry.npm.taobao.org。这样一来yarn安装依赖的速度会快很多。"></a>执行<code>yarn config get registry</code>我们可以发现yarn的官方源是<strong><a href="https://registry.yarnpkg.com" target="_blank" rel="noopener">https://registry.yarnpkg.com</a></strong>，我们执行<code>yarn config set registry https://registry.npm.taobao.org</code>。这样一来yarn安装依赖的速度会快很多。</h5><h1 id="Node小技巧"><a href="#Node小技巧" class="headerlink" title="Node小技巧"></a>Node小技巧</h1><p>有时候我需要搭建一个静态文件服务器来查看html网页或者文件，这时候如果去配置Nginx的话不免有些大材小用，这时候一个简单的node文件就可以解决，新建文件，文件内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> connect = <span class="built_in">require</span>(<span class="string">"connect"</span>);</span><br><span class="line"><span class="keyword">var</span> serveStatic = <span class="built_in">require</span>(<span class="string">"serve-static"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = connect();</span><br><span class="line">app.use(serveStatic(<span class="string">"/home/zhenglee/node/demo/dist"</span>));<span class="comment">//静态文件目录</span></span><br><span class="line">app.listen(<span class="number">5000</span>);<span class="comment">//端口</span></span><br></pre></td></tr></table></figure><p>保存为httpserver.js，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm install connect serve-static</span><br><span class="line">node httpserver.js</span><br></pre></td></tr></table></figure><p>这时候打开网页，访问<a href="http://localhost:5000" target="_blank" rel="noopener">http://localhost:5000</a> 即可。</p>]]></content>
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node,npm,cnpm,yarn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker环境搭建</title>
      <link href="/2018/07/20/Docker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/07/20/Docker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h5 id="相信不管你是刚踏入互联网圈，还是已经摸爬滚打了几年，你一定听说过容器技术。但是要说当下最火的容器技术是什么，技术人员一定异口同声的回答-”Docker“。"><a href="#相信不管你是刚踏入互联网圈，还是已经摸爬滚打了几年，你一定听说过容器技术。但是要说当下最火的容器技术是什么，技术人员一定异口同声的回答-”Docker“。" class="headerlink" title="相信不管你是刚踏入互联网圈，还是已经摸爬滚打了几年，你一定听说过容器技术。但是要说当下最火的容器技术是什么，技术人员一定异口同声的回答:”Docker“。"></a>相信不管你是刚踏入互联网圈，还是已经摸爬滚打了几年，你一定听说过容器技术。但是要说当下最火的容器技术是什么，技术人员一定异口同声的回答:”<strong><em>Docker</em></strong>“。</h5><h5 id="什么样的技术人员适合学Docker呢？我认为后端同学和对新技术敏感的同学最合适，这样才能跟得上技术的潮流，使自己不被淘汰。当然正在上学的学生学习Docker对自己找实习机会和找工作也会十分有利的，毕竟技多不压身。"><a href="#什么样的技术人员适合学Docker呢？我认为后端同学和对新技术敏感的同学最合适，这样才能跟得上技术的潮流，使自己不被淘汰。当然正在上学的学生学习Docker对自己找实习机会和找工作也会十分有利的，毕竟技多不压身。" class="headerlink" title="什么样的技术人员适合学Docker呢？我认为后端同学和对新技术敏感的同学最合适，这样才能跟得上技术的潮流，使自己不被淘汰。当然正在上学的学生学习Docker对自己找实习机会和找工作也会十分有利的，毕竟技多不压身。"></a>什么样的技术人员适合学Docker呢？我认为后端同学和对新技术敏感的同学最合适，这样才能跟得上技术的潮流，使自己不被淘汰。当然正在上学的学生学习Docker对自己找实习机会和找工作也会十分有利的，毕竟技多不压身。</h5><h5 id="关于的Docker的详细介绍在网上已经多得不能再多了，大家只要百度或者Google一下就能获取到大量的资料，所以我就不在这详细介绍了，下面我就说下我在工作中为什么会选择Docker："><a href="#关于的Docker的详细介绍在网上已经多得不能再多了，大家只要百度或者Google一下就能获取到大量的资料，所以我就不在这详细介绍了，下面我就说下我在工作中为什么会选择Docker：" class="headerlink" title="关于的Docker的详细介绍在网上已经多得不能再多了，大家只要百度或者Google一下就能获取到大量的资料，所以我就不在这详细介绍了，下面我就说下我在工作中为什么会选择Docker："></a>关于的Docker的详细介绍在网上已经多得不能再多了，大家只要百度或者Google一下就能获取到大量的资料，所以我就不在这详细介绍了，下面我就说下我在工作中为什么会选择Docker：</h5><ul><li><strong>方便部署、交付、迁移、测试，总结起来就是方便持续集成持续交付部署。</strong></li><li><strong>启动迅速，秒级的启动速度远远胜过了虚拟机，启动后占用的系统资源也更少。</strong></li></ul><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><h3 id="场景1"><a href="#场景1" class="headerlink" title="场景1"></a>场景1</h3><h5 id="还记得上学的时候，学习新语言的第一天老师总会教大家如何搭建环境。比如在安装Mysql的时候，学校机房的电脑，你自己的笔记本，再加上各种不一样的Windows版本，不同的Linux发行版，总是让学生出现各种各样的问题。"><a href="#还记得上学的时候，学习新语言的第一天老师总会教大家如何搭建环境。比如在安装Mysql的时候，学校机房的电脑，你自己的笔记本，再加上各种不一样的Windows版本，不同的Linux发行版，总是让学生出现各种各样的问题。" class="headerlink" title="还记得上学的时候，学习新语言的第一天老师总会教大家如何搭建环境。比如在安装Mysql的时候，学校机房的电脑，你自己的笔记本，再加上各种不一样的Windows版本，不同的Linux发行版，总是让学生出现各种各样的问题。"></a>还记得上学的时候，学习新语言的第一天老师总会教大家如何搭建环境。比如在安装Mysql的时候，学校机房的电脑，你自己的笔记本，再加上各种不一样的Windows版本，不同的Linux发行版，总是让学生出现各种各样的问题。</h5><h5 id="如果那时候Docker存在的话就轻松解决了这个问题，我只要安装好Docker，然后执行下"><a href="#如果那时候Docker存在的话就轻松解决了这个问题，我只要安装好Docker，然后执行下" class="headerlink" title="如果那时候Docker存在的话就轻松解决了这个问题，我只要安装好Docker，然后执行下"></a>如果那时候Docker存在的话就轻松解决了这个问题，我只要安装好Docker，然后执行下</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br><span class="line">docker run -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br></pre></td></tr></table></figure><h5 id="好了，一个root密码为123456的mysql服务就这样搭建好了，最多出现端口占用的问题，换个端口在执行一次即可。"><a href="#好了，一个root密码为123456的mysql服务就这样搭建好了，最多出现端口占用的问题，换个端口在执行一次即可。" class="headerlink" title="好了，一个root密码为123456的mysql服务就这样搭建好了，最多出现端口占用的问题，换个端口在执行一次即可。"></a>好了，一个root密码为123456的mysql服务就这样搭建好了，最多出现端口占用的问题，换个端口在执行一次即可。</h5><hr><h5 id="假如你现在需要跑某个开源的Demo，但是这个Demo使用的数据库你的电脑没有安装，。以PostgreSQL为例，这时候你只要执行下"><a href="#假如你现在需要跑某个开源的Demo，但是这个Demo使用的数据库你的电脑没有安装，。以PostgreSQL为例，这时候你只要执行下" class="headerlink" title="假如你现在需要跑某个开源的Demo，但是这个Demo使用的数据库你的电脑没有安装，。以PostgreSQL为例，这时候你只要执行下"></a>假如你现在需要跑某个开源的Demo，但是这个Demo使用的数据库你的电脑没有安装，。以<strong>PostgreSQL</strong>为例，这时候你只要执行下</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull postgres</span><br><span class="line">docker run -p 5432:5432 -e POSTGRES_PASSWORD=123456 -d postgres</span><br></pre></td></tr></table></figure><h5 id="一个密码为123456，端口为5432的postgres服务就有了。"><a href="#一个密码为123456，端口为5432的postgres服务就有了。" class="headerlink" title="一个密码为123456，端口为5432的postgres服务就有了。"></a>一个密码为123456，端口为5432的postgres服务就有了。</h5><h5 id="当然你还可以指定各种版本，这样就相当于在电脑或服务器中装了多个版本的服务。"><a href="#当然你还可以指定各种版本，这样就相当于在电脑或服务器中装了多个版本的服务。" class="headerlink" title="当然你还可以指定各种版本，这样就相当于在电脑或服务器中装了多个版本的服务。"></a>当然你还可以指定各种版本，这样就相当于在电脑或服务器中装了多个版本的服务。</h5><h3 id="场景3"><a href="#场景3" class="headerlink" title="场景3"></a>场景3</h3><h5 id="现在后端最火的技术当属微服务了。以电商项目为例，在商促期间访问压力大的模块都在秒杀上，这时候如果我们采用了Docker镜像来部署，只需要重新启动一个或者多个秒杀模块就解决了问题，在商促结束后停止掉额外启动的秒杀模块，这样就达到了弹性伸缩的目的，节省了服务器的资源。"><a href="#现在后端最火的技术当属微服务了。以电商项目为例，在商促期间访问压力大的模块都在秒杀上，这时候如果我们采用了Docker镜像来部署，只需要重新启动一个或者多个秒杀模块就解决了问题，在商促结束后停止掉额外启动的秒杀模块，这样就达到了弹性伸缩的目的，节省了服务器的资源。" class="headerlink" title="现在后端最火的技术当属微服务了。以电商项目为例，在商促期间访问压力大的模块都在秒杀上，这时候如果我们采用了Docker镜像来部署，只需要重新启动一个或者多个秒杀模块就解决了问题，在商促结束后停止掉额外启动的秒杀模块，这样就达到了弹性伸缩的目的，节省了服务器的资源。"></a>现在后端最火的技术当属<a href="https://baike.baidu.com/item/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/18705784?fr=aladdin" target="_blank" rel="noopener">微服务</a>了。以电商项目为例，在商促期间访问压力大的模块都在秒杀上，这时候如果我们采用了Docker镜像来部署，只需要重新启动一个或者多个秒杀模块就解决了问题，在商促结束后停止掉额外启动的秒杀模块，这样就达到了弹性伸缩的目的，节省了服务器的资源。</h5><h1 id="安装Docker官网文档"><a href="#安装Docker官网文档" class="headerlink" title="安装Docker官网文档"></a>安装Docker<a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/#docker-ee-customers" target="_blank" rel="noopener">官网文档</a></h1><h5 id="因为我家里的服务器使用ESXi跑着一个Ubuntu的实例，我就以Ubuntu为例子"><a href="#因为我家里的服务器使用ESXi跑着一个Ubuntu的实例，我就以Ubuntu为例子" class="headerlink" title="因为我家里的服务器使用ESXi跑着一个Ubuntu的实例，我就以Ubuntu为例子"></a>因为我家里的服务器使用ESXi跑着一个Ubuntu的实例，我就以Ubuntu为例子</h5><ol><li><p>更新安装源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure></li><li><p>添加GPG key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure></li><li><p>验证GPG key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key fingerprint 0EBFCD88</span><br></pre></td></tr></table></figure></li><li><p>添加官方源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository \</span><br><span class="line">   <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">   <span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">   stable"</span></span><br></pre></td></tr></table></figure></li><li><p>再次更新安装源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>安装docker-ce</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure></li><li><p>运行hello-world</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure></li><li><p>如果屏幕上出现了 “<strong>Hello from Docker!</strong>“ 字样，恭喜你，安装成功。</p><p>如果你以为到了这一步就完事的话，那你真是图样图森破了，由于一些大家都懂得的原因，在国内访问外网的Docker Hub并没有什么速度，好在国内有加速镜像可以配置。我使用的是<a href="https://www.daocloud.io/" target="_blank" rel="noopener">DaoCloud</a>，在这个网站注册后打开<a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="noopener">加速镜像的链接</a>，执行网页上给的命令即可。至此，Docker的安装和配置加速镜像就彻底结束了。</p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h5 id="今天仅仅是介绍了如何安装Docker和配置加速器，后面我还会分享一些Docker在具体项目中应用，敬请期待。"><a href="#今天仅仅是介绍了如何安装Docker和配置加速器，后面我还会分享一些Docker在具体项目中应用，敬请期待。" class="headerlink" title="今天仅仅是介绍了如何安装Docker和配置加速器，后面我还会分享一些Docker在具体项目中应用，敬请期待。"></a>今天仅仅是介绍了如何安装Docker和配置加速器，后面我还会分享一些Docker在具体项目中应用，敬请期待。</h5>]]></content>
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello Go!</title>
      <link href="/2018/07/19/Hello%20Go/"/>
      <url>/2018/07/19/Hello%20Go/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h5 id="要说当下什么语言最火，coder们自然而然就想到了Google爸爸推出的语言Go。"><a href="#要说当下什么语言最火，coder们自然而然就想到了Google爸爸推出的语言Go。" class="headerlink" title="要说当下什么语言最火，coder们自然而然就想到了Google爸爸推出的语言Go。"></a>要说当下什么语言最火，coder们自然而然就想到了Google爸爸推出的语言Go。</h5><h1 id="关于Go-官网链接"><a href="#关于Go-官网链接" class="headerlink" title="关于Go 官网链接"></a>关于Go <a href="https://golang.org/" target="_blank" rel="noopener">官网链接</a></h1><h5 id="Go是一种新的语言，一种并发的、带垃圾回收的、快速编译的语言。它具有以下特点："><a href="#Go是一种新的语言，一种并发的、带垃圾回收的、快速编译的语言。它具有以下特点：" class="headerlink" title="Go是一种新的语言，一种并发的、带垃圾回收的、快速编译的语言。它具有以下特点："></a>Go是一种新的语言，一种并发的、带垃圾回收的、快速编译的语言。它具有以下特点：</h5><ul><li><p><strong>它可以在一台计算机上用几秒钟的时间编译一个大型的Go程序。</strong></p></li><li><p><strong>Go为软件构造提供了一种模型，它使依赖分析更加容易，且避免了大部分C风格include文件与库的开头。</strong></p></li><li><p><strong>Go是静态类型的语言，它的类型系统没有层级。因此用户不需要在定义类型之间的关系上花费时间，这样感觉起来比典型的面向对象语言更轻量级。</strong></p></li><li><p><strong>Go完全是垃圾回收型的语言，并为并发执行与通信提供了基本的支持。按照其设计，Go打算为多核机器上系统软件的构造提供一种方法。</strong></p></li></ul><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h5 id="由于我使用的是MacBook，所以我就以MacBook为例进行环境搭建，Linux应该是差不多的步骤。"><a href="#由于我使用的是MacBook，所以我就以MacBook为例进行环境搭建，Linux应该是差不多的步骤。" class="headerlink" title="由于我使用的是MacBook，所以我就以MacBook为例进行环境搭建，Linux应该是差不多的步骤。"></a>由于我使用的是MacBook，所以我就以MacBook为例进行环境搭建，Linux应该是差不多的步骤。</h5><p><strong>打开<a href="https://golang.org/dl/" target="_blank" rel="noopener">此链接</a>，选择对于的平台的版本，我选择的是go1.10.3.darwin-amd64.tar.gz</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.google.com/go/go1.10.3.darwin-amd64.tar.gz</span><br></pre></td></tr></table></figure><p><strong>下载后解压到 /usr/local 目录下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -C /usr/<span class="built_in">local</span> -xvf go1.10.3.darwin-amd64.tar.gz</span><br></pre></td></tr></table></figure><p><strong>配置环境变量，可以在/etc/profile处或者~/bashrc处以及~/zshrc处编辑</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GO_HOME=<span class="string">"/usr/local/go"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$GO_HOME</span>/bin"</span></span><br></pre></td></tr></table></figure><p><strong>然后source &lt;你配置环境变量的地方&gt;，在命令行下执行go，有返回即是环境搭建完毕。</strong></p><h1 id="运行你的第一个Go语言程序"><a href="#运行你的第一个Go语言程序" class="headerlink" title="运行你的第一个Go语言程序"></a>运行你的第一个Go语言程序</h1><p><strong>打开vscode或者sublime编辑器，输入以下代码，保存为helloworld.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello, Go"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>然后执行下面的命令</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> run helloworld.<span class="keyword">go</span></span><br></pre></td></tr></table></figure><p><strong>至此，你的第一个Go语言程序就完成了。</strong> </p>]]></content>
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<h1 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h1><h3 id="个人简介"><a href="#个人简介" class="headerlink" title="个人简介"></a>个人简介</h3><ul><li><p><strong>一枚生命不息，折腾不止的程序猿。</strong></p></li><li><p><strong>现在主要从事Android，Java Web，Devops工作。</strong></p></li><li><p><strong>崇尚万物基于Linux。</strong></p></li><li><p><strong>热爱互联网，热爱编程，喜欢挑战新技术。</strong></p></li></ul><h3 id="工作技能树"><a href="#工作技能树" class="headerlink" title="工作技能树"></a>工作技能树</h3><ul><li><strong>Android</strong><ul><li><strong>GPS</strong></li><li><strong>LBS</strong></li><li><strong>电商</strong></li><li><strong>环信</strong></li><li><strong>支付(微信，支付宝)</strong></li><li><strong>混合开发</strong></li><li><strong>反编译</strong></li></ul></li><li><strong>Java Web</strong>  <ul><li><strong>Spring Boot </strong></li><li><strong>Spring Cloud微服务全家桶 </strong></li><li><strong>Restful</strong></li><li><strong>Http</strong></li><li><strong>MyBatis</strong> </li><li><strong>Tomcat</strong></li><li><strong>Swagger</strong></li><li><strong>Api 加密</strong></li><li><strong>数据库</strong></li><li><strong>微信公众号开发</strong></li></ul></li><li><strong>Devops</strong> <ul><li><strong>Linux </strong><ul><li><strong>日常维护</strong></li><li><strong>各语言环境搭建</strong></li><li><strong>Shell脚本</strong></li><li><strong>Nginx</strong></li></ul></li><li><strong>Github  , GitLab </strong><ul><li><strong>通过WebHook实现持续集成</strong></li></ul></li><li><strong>Jenkins</strong><ul><li><strong>Android自动构建</strong></li><li><strong>iOS自动构建</strong></li><li><strong>Web自动构建</strong></li></ul></li><li><strong>Docker</strong> <ul><li><strong>Dockerfile编写</strong></li><li><strong>Docker-Compose服务编排</strong></li><li><strong>私有仓库搭建</strong></li></ul></li><li><strong>Jira</strong> <ul><li><strong>基于Scrum的敏捷开发管理</strong></li></ul></li><li><strong>SonarQube</strong> <ul><li><strong>静态代码检查</strong></li></ul></li><li><strong>ELK</strong><ul><li><strong>日志搜集分析</strong></li></ul></li></ul></li></ul><h3 id="生活技能树"><a href="#生活技能树" class="headerlink" title="生活技能树"></a>生活技能树</h3><ul><li><strong>服务器(我个人在家里维护了一台7*24小时的HP Gen8服务器)</strong><ul><li><strong>ESXi</strong><ul><li><strong>HomeLab</strong></li><li><strong>Ubuntu(主要用来给黑群晖提供NFS服务。Docker , Git , 充当测试服务器)</strong></li><li><strong>黑群晖(主要用来混PT和配合玩影音😁)</strong></li><li><strong>软路由(OpenWRT)</strong></li></ul></li></ul></li><li><strong>路由器</strong><ul><li><strong>固件编译，烧录</strong></li><li><strong>内网穿透</strong></li><li><strong>端口转发</strong></li></ul></li><li><strong>树莓派</strong><ul><li><strong>游戏系统</strong></li><li><strong>Kodi</strong></li><li><strong>Transmission(IO性能极差)</strong></li><li><strong>NAS(现已迁移到服务器)</strong></li></ul></li><li><strong>有待挖掘的设备</strong><ul><li><strong>天猫精灵(配合博联网关实现控制传统家用电器和开关，设备太贵了，后期慢慢补充)</strong></li><li><strong>小爱同学(超全曲库的哄娃神器，控制小米系智能家居，但是我家目前只有一个小米盒子😂)</strong></li><li><strong>Apple TV 4K(作为HomeKit智能家居网关，目前我只是它来Air Play)</strong></li></ul></li></ul><h3 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h3><ul><li>邮箱：<a href="mailto:leezheng0815@gmail.com" target="_blank" rel="noopener">leezheng0815@gmail.com</a></li></ul>]]></content>
    </entry>
    
  
</search>
