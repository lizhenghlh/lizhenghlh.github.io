<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>编译构建总结</title>
      <link href="/2019/04/06/Makefile%E6%80%BB%E7%BB%93/"/>
      <url>/2019/04/06/Makefile%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    最近一个月都在忙气象模型相关的应用，例如mm5，WRF，CMAQ等，因为需要在天河超算上运行，普通用户又没有sudo权限，所以就只能自己动手编译了。这些应用都是开源的，切大多采用Fortain语言编写，折腾了一段时间自然要记录一下。</p><h1 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h1><h2 id="make-说白了就是一个编译命令"><a href="#make-说白了就是一个编译命令" class="headerlink" title="make (说白了就是一个编译命令)"></a><a href="https://zh.wikipedia.org/wiki/Make" target="_blank" rel="noopener">make</a> (说白了就是一个编译命令)</h2><p>在<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91" target="_blank" rel="noopener">软件开发</a>中，<strong>make</strong>是一个工具程序（Utility software），经由读取叫做“<a href="https://zh.wikipedia.org/wiki/Makefile" target="_blank" rel="noopener">makefile</a>”的文件，<a href="https://zh.wikipedia.org/wiki/%E8%87%AA%E5%8B%95%E5%8C%96%E5%BB%BA%E6%A7%8B" target="_blank" rel="noopener">自动化建构</a>软件。它是一种转化文件形式的工具，转换的目标称为“target”；与此同时，它也检查文件的依赖关系，如果需要的话，它会调用一些外部软件来完成任务。它的依赖关系检查系统非常简单，主要根据依赖文件的修改时间进行判断。大多数情况下，它被用来<a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E8%AF%91" target="_blank" rel="noopener">编译</a><a href="https://zh.wikipedia.org/wiki/%E6%BA%90%E4%BB%A3%E7%A0%81" target="_blank" rel="noopener">源代码</a>，生成<a href="https://zh.wikipedia.org/wiki/%E7%9B%AE%E6%A0%87%E4%BB%A3%E7%A0%81" target="_blank" rel="noopener">结果代码</a>，然后把结果代码连接起来生成<a href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6" target="_blank" rel="noopener">可执行文件</a>或者<a href="https://zh.wikipedia.org/wiki/%E5%BA%93%E6%96%87%E4%BB%B6" target="_blank" rel="noopener">库文件</a>。它使用叫做“makefile”的文件来确定一个target文件的依赖关系，然后把生成这个target的相关命令传给shell去执行。</p><h2 id="Makefile-（说白了就是编译的配置文件）"><a href="#Makefile-（说白了就是编译的配置文件）" class="headerlink" title="Makefile （说白了就是编译的配置文件）"></a><a href="https://zh.wikipedia.org/wiki/Make#Makefile" target="_blank" rel="noopener">Makefile</a> （说白了就是编译的配置文件）</h2><p>一个工程中的源文件不计其数，其按类型、功能、模块分别放在若干个目录中，makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，因为 makefile就像一个<a href="https://baike.baidu.com/item/Shell%E8%84%9A%E6%9C%AC" target="_blank" rel="noopener">Shell脚本</a>一样，其中也可以执行操作系统的<a href="https://baike.baidu.com/item/%E5%91%BD%E4%BB%A4/8135974" target="_blank" rel="noopener">命令</a>。</p><h2 id="宏-说白了就是编译环境的环境变量"><a href="#宏-说白了就是编译环境的环境变量" class="headerlink" title="宏 (说白了就是编译环境的环境变量)"></a><a href="https://zh.wikipedia.org/wiki/Make#%E5%B7%A8%E9%9B%86" target="_blank" rel="noopener">宏</a> (说白了就是编译环境的环境变量)</h2><p>“宏”指的是用一个字符串代替另一个字符串的功能。在makefile中可以使用“=”号来定义宏，使用“$（宏名）”来使用宏；还可以用“+=”追加宏的内容。习惯上，宏名使用大写。例如CC、CXX、FC、FCFLAGS等。</p><p><strong>宏基本上在你做编译和移植主要修改的参数，因为大部分应用都把这里处理的很不错。</strong></p><p>一般我们可以通过环境变量设置，或者在执行<code>./configure</code>命令后跟上相应的配置，例如下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure CC=icc FC=ifort<span class="comment">#将CC和FC的编译命令指定为icc和ifort</span></span><br></pre></td></tr></table></figure><h1 id="编译器介绍"><a href="#编译器介绍" class="headerlink" title="编译器介绍"></a>编译器介绍</h1><p>网上的教程大多采用GNU的gcc和g++以及gfortran等，也有少部分资料采用intel的编译器，intel的编译器经过我的测试要比GNU系列的编译速度快，并且基本上每年每个季度都会更新，当然也是收费的，不过学生和开源项目的参与者可以免费获取一年的license，具体步骤我就不在这里叙述了，网上有很多资料。</p><p>下表是GNU和INTEL的命令对照，设计到MPI的部分这里不做介绍</p><table><thead><tr><th>GNU</th><th>INTEL</th></tr></thead><tbody><tr><td>gcc</td><td>icc</td></tr><tr><td>g++</td><td>icpc</td></tr><tr><td>gfortran</td><td>ifort</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 编译构建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Makefile,编译,构建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter入坑</title>
      <link href="/2019/02/13/Flutter%E5%85%A5%E5%9D%91/"/>
      <url>/2019/02/13/Flutter%E5%85%A5%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>作为一名有追求的开发人员，关注前沿动态是基本的职业素养之一，Flutter目前趋于稳定，是时候入坑了。</p><p>Flutter的环境搭建的文章网上多的不能在多了，我就不一一赘述了，最好的文档就是官方，<a href="https://flutter.io/docs/get-started/install/macos" target="_blank" rel="noopener">Mac OS环境搭建文档</a>。需要科学上网，不过国内有加速镜像，请自行谷歌百度。</p><p>环境搭建完毕在终端输入<code>flutter doctor</code>后稍等一会儿，如果出现如下界面代表成功了(如果不需要iOS环境，iOS toolchain可以选择不安装，Android Studio和IDEA的Flutter的插件安装你肯定会)</p><p><img src="/img/flutter/1.png" alt="安装成功"></p><p>下面就是挖坑过程，我的Android Studio在安装完Flutter插件后竟然没有创建Flutter项目的选项，虽然可以通过<code>flutter create your_package_name</code>(注意<strong>小写</strong>和<strong>下划线</strong>链接)，但是强迫症受不了啊，最后终于在<a href="https://stackoverflow.com/questions/49405321/new-flutter-project-wizard-not-showing-on-android-studio-3-0-1/52671156" target="_blank" rel="noopener">stackoverflow</a>找到思路，上面的回答无外乎卸载和重新安装Flutter插件以及必须按一定顺序来操作，但是我早就试验过，根本行不通，当看到一个回答说是启用所有AS的插件后重启即可，我马上打开插件列表，选择Disabled的插件，果然看到了<strong>Android APK support</strong>这货，enable这个插件后重启，终于有了创建Flutter项目的选项了。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发Tips</title>
      <link href="/2018/12/02/Android%E5%BC%80%E5%8F%91Tips/"/>
      <url>/2018/12/02/Android%E5%BC%80%E5%8F%91Tips/</url>
      
        <content type="html"><![CDATA[<p>我们在开发Android应用的时候经常会遇到一些小问题，为了不让这些小问题浪费你的时间，最好还是记录下，毕竟Time is money.</p><p>下面是我遇到的一些简单的问题，我会持续更新，算是一些Tips：</p><ul><li><p>给view的background设置selector不生效，因为selector的匹配规则是从上而下，所以我们应把<strong><em>state_pressed</em></strong>和<strong><em>state_selected</em></strong>等属性为<strong><em>ture</em></strong>的情况放在最前面，如果没有给view设置OnClickListener的话一定要给view设置clickable属性为true</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/ic_all_selected"</span> <span class="attr">android:state_selected</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/ic_all_selected"</span> <span class="attr">android:state_pressed</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/ic_all_unselected"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>给TextView或者EditText设置<strong>setCompoundDrawables</strong>时，记得给Drawable对象<strong><em>setBounds</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Drawable drawable = getResources().getDrawable(R.drawable.ic_add);</span><br><span class="line">drawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());</span><br><span class="line">textview.setCompoundDrawables(drawable, drawable, drawable, drawable);</span><br></pre></td></tr></table></figure></li><li><p>当View的<strong>maxWidth</strong>和<strong>maxHeight</strong>属性不生效时，不妨试试设置<strong>adjustViewBounds</strong>的属性为<strong><em>true</em></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/img"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:maxWidth</span>=<span class="string">"100dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:maxHeight</span>=<span class="string">"100dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:adjustViewBounds</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>当我们用Fragment嵌套Fragment时，同时Fragment又搭配ViewPager显示内容，会出现内层的Fragment的ViewPager不显示UI或者只显示第一页的问题，其实是因为Activity嵌套Fragment使用ViewPager时应该用<strong><em>getSupportFragmentManager()</em></strong>作为PagerAdapter实例化的参数，而当Fragment嵌套Fragment使用ViewPager时应该用<strong><em>getChildFragmentManager()</em></strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyPagerAdapter adapter = <span class="keyword">new</span> MyPagerAdapter(getActivity().getSupportFragmentManager());<span class="comment">//❌错误</span></span><br><span class="line">MyPagerAdapter adapter = <span class="keyword">new</span> MyPagerAdapter(getChildFragmentManager());<span class="comment">//✔️正确</span></span><br></pre></td></tr></table></figure></li><li><p>当设计同学给的<strong><em>透明度</em></strong>标注是百分比而不是16进制的时候，总要自己去手动算，所以我找了下表一一对应</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">100% — FF </span><br><span class="line">99% — FC </span><br><span class="line">98% — FA </span><br><span class="line">97% — F7 </span><br><span class="line">96% — F5 </span><br><span class="line">95% — F2 </span><br><span class="line">94% — F0 </span><br><span class="line">93% — ED </span><br><span class="line">92% — EB </span><br><span class="line">91% — E8 </span><br><span class="line">90% — E6 </span><br><span class="line">89% — E3 </span><br><span class="line">88% — E0 </span><br><span class="line">87% — DE </span><br><span class="line">86% — DB </span><br><span class="line">85% — D9 </span><br><span class="line">84% — D6 </span><br><span class="line">83% — D4 </span><br><span class="line">82% — D1 </span><br><span class="line">81% — CF </span><br><span class="line">80% — CC </span><br><span class="line">79% — C9 </span><br><span class="line">78% — C7 </span><br><span class="line">77% — C4 </span><br><span class="line">76% — C2 </span><br><span class="line">75% — BF </span><br><span class="line">74% — BD </span><br><span class="line">73% — BA </span><br><span class="line">72% — B8 </span><br><span class="line">71% — B5 </span><br><span class="line">70% — B3 </span><br><span class="line">69% — B0 </span><br><span class="line">68% — AD </span><br><span class="line">67% — AB </span><br><span class="line">66% — A8 </span><br><span class="line">65% — A6 </span><br><span class="line">64% — A3 </span><br><span class="line">63% — A1 </span><br><span class="line">62% — 9E </span><br><span class="line">61% — 9C </span><br><span class="line">60% — 99 </span><br><span class="line">59% — 96 </span><br><span class="line">58% — 94 </span><br><span class="line">57% — 91 </span><br><span class="line">56% — 8F </span><br><span class="line">55% — 8C </span><br><span class="line">54% — 8A </span><br><span class="line">53% — 87 </span><br><span class="line">52% — 85 </span><br><span class="line">51% — 82 </span><br><span class="line">50% — 80 </span><br><span class="line">49% — 7D </span><br><span class="line">48% — 7A </span><br><span class="line">47% — 78 </span><br><span class="line">46% — 75 </span><br><span class="line">45% — 73 </span><br><span class="line">44% — 70 </span><br><span class="line">43% — 6E </span><br><span class="line">42% — 6B </span><br><span class="line">41% — 69 </span><br><span class="line">40% — 66 </span><br><span class="line">39% — 63 </span><br><span class="line">38% — 61 </span><br><span class="line">37% — 5E </span><br><span class="line">36% — 5C </span><br><span class="line">35% — 59 </span><br><span class="line">34% — 57 </span><br><span class="line">33% — 54 </span><br><span class="line">32% — 52 </span><br><span class="line">31% — 4F </span><br><span class="line">30% — 4D </span><br><span class="line">29% — 4A </span><br><span class="line">28% — 47 </span><br><span class="line">27% — 45 </span><br><span class="line">26% — 42 </span><br><span class="line">25% — 40 </span><br><span class="line">24% — 3D </span><br><span class="line">23% — 3B </span><br><span class="line">22% — 38 </span><br><span class="line">21% — 36 </span><br><span class="line">20% — 33 </span><br><span class="line">19% — 30 </span><br><span class="line">18% — 2E </span><br><span class="line">17% — 2B </span><br><span class="line">16% — 29 </span><br><span class="line">15% — 26 </span><br><span class="line">14% — 24 </span><br><span class="line">13% — 21 </span><br><span class="line">12% — 1F </span><br><span class="line">11% — 1C </span><br><span class="line">10% — 1A </span><br><span class="line">9% — 17 </span><br><span class="line">8% — 14 </span><br><span class="line">7% — 12 </span><br><span class="line">6% — 0F </span><br><span class="line">5% — 0D </span><br><span class="line">4% — 0A </span><br><span class="line">3% — 08 </span><br><span class="line">2% — 05 </span><br><span class="line">1% — 03 </span><br><span class="line">0% — 00</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由器认证校园网的一个思路</title>
      <link href="/2018/08/09/%E8%B7%AF%E7%94%B1%E5%99%A8%E8%AE%A4%E8%AF%81%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E4%B8%80%E4%B8%AA%E6%80%9D%E8%B7%AF/"/>
      <url>/2018/08/09/%E8%B7%AF%E7%94%B1%E5%99%A8%E8%AE%A4%E8%AF%81%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E4%B8%80%E4%B8%AA%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>现在办公的地方在大学里，办理宽带的难度基本上跟登天的难度是一样儿一样儿的。</p><p>关于在路由器上认证校园网一直是一些高校的坑，毕竟一人一账号，电脑登了，手机不能上，手机登上了，电脑不能上，路由器又不能安装校园网客户端或者进行Web认证，有些路由器可以通过安装插件来实现锐捷认证，可惜这个学校不是锐捷😢。</p><p>但是这并不能阻止我要使用路由器进行校园网认证的脚步，手里有个X讯的K2，曾经刷的Padavan系统用来中继，现在家里已经全部换成千兆，淘汰的这个正好可以拿到公司进行愉快的玩(装)耍(X)。有的同学可能说了，你用笔记本分享个热点出来不就好了，或者买个360WiFi或者小米随身WiFi，奈何MacBook不支持一边连接WiFi一边分享热点的功能，有人又说了，你不会买个RJ45转接口啊，我也想买啊，还不是因为穷😂</p><p>当然以上都是冠冕堂皇的话，最重要的我需要$$乳才能扶墙啊，虽然App Store花12块就能买个小火箭或者安卓上随便找个客户端也行，但是全程打开确实太费电了，反正路由器要24小时打开，在路由器上挂上$$乳，打开GFW模式，电脑盒子手机就不用再配置代理了，这不是最美的事了吗。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>一台可以刷OpenWRT的路由器，X讯的K2最合适不过了，刷上Breed后，找个OpenWRT就能开始愉快的玩耍了，因为之前写过shell的脚本用来在MBP上执行实现一键认证，当时就考虑到了路由器上基本都是只集成了ash，所以特意考虑了下语法，这样就能方便今天的迁移，夸一下自己，谁让我这么未雨绸缪。关于刷Breed我就不多说了，因为网上教程太多太简单，刷好之后刷固件就变成了傻瓜操作，根本不用操心变砖的事。</p><h1 id="Show-Time"><a href="#Show-Time" class="headerlink" title="Show Time"></a>Show Time</h1><p>首先就是使用抓包工具，Web认证的话Chrome足矣，如果是客户端，可以尝试Charles和Fiddler。</p><ul><li><p>打开Chrome，进入认证的网页，输入你的认证账号和密码，但是<strong>不要点</strong>认证或者登陆按钮，这时打开<strong>开发者工具</strong>视图，选择<strong>Network</strong>节点，勾上<strong>Preserve log</strong> 。</p><p><img src="/img/portal/1.png" alt></p><hr></li><li><p>然后点击认证或者登陆，出现下图。</p><p><img src="/img/portal/2.png" alt></p><hr></li><li><p>右键选中第一项最可疑的链接，然后<strong>Copy</strong>，再<strong>Copy as cURL</strong>，最后粘贴到记事本。</p><p><img src="/img/portal/3.png" alt></p><p><img src="/img/portal/4.png" alt></p><hr></li><li><p>得到下面的内容，就可以搜寻你认为可疑的内容了，然后你要做的就是动态改变需要的参数就可以。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">'http://x.x.x.x/Login?para=abcdefghijklmnopqrstuvwxyz==&amp;_=1533804052510'</span> -H <span class="string">'Pragma: no-cache'</span> -H <span class="string">'Accept-Encoding: gzip, deflate'</span> -H <span class="string">'Accept-Language: zh-CN,zh;q=0.9,und;q=0.8,en;q=0.7,zh-TW;q=0.6'</span> -H <span class="string">'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36'</span> -H <span class="string">'Accept: */*'</span> -H <span class="string">'Referer: http://10.0.0.253/Index.jsp?hwid=00:00:00:00:00:00&amp;devip=10.0.0.252&amp;devport=0&amp;vlan=0'</span> -H <span class="string">'Cookie: JSESSIONID=57516FB172738FCEA999C2526AED0F5D'</span> -H <span class="string">'Connection: keep-alive'</span> -H <span class="string">'Cache-Control: no-cache'</span> --compressed</span><br></pre></td></tr></table></figure><p><img src="/img/portal/5.png" alt></p><p>比如para后面的文本(我已经替换成了abcd…xyz)，很明显这个就是你账号密码生成的参数，紧接着的自然就是毫秒时间戳了(眼尖的你一定看出来了)，再有一个就是Cookie中的JSESSIONID了，para可以记录下，时间戳可以自己生成，但是JSESSIONID只能通过在线获取了，怎么获取到JSESSIONID呢？当然是curl大法。</p></li><li><p>首先通过ssh以root身份连接到OpenWRT中，然后安装curl，毕竟K2的闪存很小，所以很多东西需要自己安装，之所以选择OpenWRT就是因为自带了opkg管理器，可以免去小白重新编译固件去集成curl的步骤，登录后分别执行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg install curl</span><br></pre></td></tr></table></figure></li><li><p>下面就是我整理的获取Cookie中某个key中的value的方法，很明显，这个就是通过curl模拟打开认证的网页，然后获取<strong>Set-Cookie</strong>的值再打印出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#! /bin/sh</span><br><span class="line">session=$(curl -sI http:<span class="comment">//x.x.x.x/Index.jsp\?hwid=00:00:00:00:00:00\&amp;devip=10.0.0.252\&amp;devport=0\&amp;vlan=0 | tr -d '\r' | sed -En 's/^Set-Cookie: (.*)/\1/p')</span></span><br><span class="line">echo $session</span><br></pre></td></tr></table></figure></li><li><p>你得到的值可能是下面这样的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSESSIONID=E9CDB31EB128580EAB7FCF0C6A3D2AA4; Path=/</span><br></pre></td></tr></table></figure><p>但是你只需要分号以前的内容，这时候只有通过shell去取子串就可以了，然后就有了下面的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#! /bin/sh</span><br><span class="line">session=$(curl -sI http:<span class="comment">//x.x.x.x/Index.jsp\?hwid=00:00:00:00:00:00\&amp;devip=10.0.0.252\&amp;devport=0\&amp;vlan=0 | tr -d '\r' | sed -En 's/^Set-Cookie: (.*)/\1/p')</span></span><br><span class="line">echo $session</span><br><span class="line">string=$(echo $&#123;session%; Path=<span class="comment">/*&#125;)</span></span><br><span class="line"><span class="comment">echo $string</span></span><br></pre></td></tr></table></figure></li><li><p>接下来是最简单的时间戳获取了，我已经准备好了，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#! /bin/sh</span><br><span class="line">timeStamp=`date +%s`</span><br><span class="line">echo $timeStamp</span><br><span class="line">currentTimeStamp=$((timeStamp*<span class="number">1000</span>))</span><br><span class="line">echo $currentTimeStamp</span><br></pre></td></tr></table></figure><p>上面的脚本就可以打印当前时间戳了。</p></li><li><p>最后需要的就是拼接参数了，也就是上面获取的<strong>JSESSIONID</strong>，然后就有了下面的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#! /bin/sh</span><br><span class="line">session=$(curl -sI http:<span class="comment">//10.0.0.253/Index.jsp\?hwid=00:00:00:00:00:00\&amp;devip=10.0.0.252\&amp;devport=0\&amp;vlan=0 | tr -d '\r' | sed -En 's/^Set-Cookie: (.*)/\1/p')</span></span><br><span class="line">echo $session</span><br><span class="line">string=$(echo $&#123;session%; Path=<span class="comment">/*&#125;)</span></span><br><span class="line"><span class="comment">echo $string</span></span><br><span class="line"><span class="comment">param="Cookie: $&#123;string&#125;"</span></span><br><span class="line"><span class="comment">echo $param</span></span><br><span class="line"><span class="comment">timeStamp=`date +%s`</span></span><br><span class="line"><span class="comment">echo $timeStamp</span></span><br><span class="line"><span class="comment">currentTimeStamp=$((timeStamp*1000))</span></span><br><span class="line"><span class="comment">echo $currentTimeStamp</span></span><br><span class="line"><span class="comment">cmd="curl -i 'http://x.x.x.x/Login?para=abcdefghijklmnopqrstuvwxyz==&amp;_=$&#123;currentTimeStamp&#125;' -H 'Pragma: no-cache' -H 'Accept-Encoding: gzip, deflate' -H 'Accept-Language: zh-CN,zh;q=0.9,und;q=0.8,en;q=0.7,zh-TW;q=0.6' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36' -H 'Accept: */</span>*<span class="string">' -H '</span>Referer: http:<span class="comment">//x.x.x.x/Index.jsp?hwid=00:00:00:00:00:00&amp;devip=10.0.0.252&amp;devport=0&amp;vlan=0' -H 'Connection: keep-alive' -H 'Cache-Control: no-cache' -H '$&#123;param&#125;' "</span></span><br><span class="line">echo $cmd</span><br><span class="line">eval <span class="string">"$cmd"</span></span><br></pre></td></tr></table></figure><p>到这一步，基本上就完成了，你要做的就是把我打的x.x.x.x换成你们学校的ip或者url，当然不同的系统肯定不一样，但是都是大同小异的。把上面的文件保存为portal.sh，在赋予执行权限（不理解为什么执行chmod a+x竟然不管用）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 portal.sh</span><br></pre></td></tr></table></figure></li><li><p>下面开始见证奇迹，执行脚本，看能否通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh portal.sh</span><br></pre></td></tr></table></figure><p>我这边打印的结果是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">response</span>&gt;</span><span class="tag">&lt;<span class="name">success</span>&gt;</span>true<span class="tag">&lt;/<span class="name">success</span>&gt;</span><span class="tag">&lt;/<span class="name">response</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后我打开百度，此时已经可以打开网页了，不会再弹出认证的网页了，手机和电脑可以愉快的同时在线了，虽然共享带宽，但是足矣了。如果你以为这样的完事了，那你真是Too Young了，我自然是不会每次都手动去执行这个shell，定时任务必须是立马想到的，于是我打开OpenWRT的管理界面，进入定时任务，设置了每天上午8:20和下午13:20自动执行，最最重要的是你还要写个脚本每十分钟去定时curl一下百度，因为校园网是检测固定时间没有网络流量就会断网。</p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上面的脚本只是一个参考版本，建议大家去改成更完善的shell脚本，其他的校园网都是同理的，如果你实现了这个，其他的基本就没有什么问题了。</p><p>搭建$$乳也是非常简单的，有可能违规，就不给大家介绍了，只有网上搜一个适用于OpenWRT的ipk文件，scp到路由器里安装重启就可以在web页面进行设置了。</p>]]></content>
      
      
      <categories>
          
          <category> 生活职场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 校园网,路由器,portal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序猿的修炼之道</title>
      <link href="/2018/08/07/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%9A%84%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93/"/>
      <url>/2018/08/07/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%9A%84%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93/</url>
      
        <content type="html"><![CDATA[<p>最近公司的事很忙，再加上家里也有不少事，所以这些日子没有什么产出。最近总想写一些关于程序员的事，所以说写就写。</p><p>所谓成长，应该就是那句”如果你觉得以前的自己很傻X，那你就成长了”，其实生活不就是让你一次又一次觉得自己以前很傻的过程吗，很多人觉得傻是很可笑的事，但是你敢说成长是很可笑的事吗？</p><p>曾经我也是一名北漂，记得刚到北京的时候，我跟同学租着一个月几百的群租公寓，上班路程要两个小时的公交和地铁，公交的拥挤程度让你真正见识到什么是真正的”北京欢迎你”，图的就是省点房租，但是一周过去后我就发现自己的想法很可笑，虽然两个小时的公交我起码可以看一小时的技术文章，但是如果我找一个离公司近的房子，我就可以省出一个小时的时间来进行高效的学习，这时我不免开始嘲笑一周前因为省了一点房租而沾沾自喜的我。第二周我就开始找离公司近的新房子，然后为了退押金走在没有路灯伸手不见五指的街上，那天晚上我就发誓：”我以后绝对不会再回这了！”</p><p>渐渐的我适应了北京的环境，每天在地铁上读技术文章丰富自己的技术认知，当然还有更幸运的是我遇到了一个好的技术老大，一个好的师傅以及一票好同事，我深刻的知道那段日子我最苦，但是也是我进步最快和最开心的日子，我们每周有技术分享，有CodeReview，有需求做不完同事间的互帮互助。</p><p>后来我离开了北京。回到家后感触最深的就是工作机会跟北京比少太多了，毕竟三四线城市的互联网环境跟北上广比就是天壤之别，大部分公司都是做外包或者接一些ZF工程。但不是在小公司你就不能没有一番作为，回家的这段时间，我一直利用自己业余的时间丰富自己的职业技能和非职业技能，坚持一年下来，你同样会发现自己有很大的进步，所以与其抱怨家里的就业环境，不如丰富自己技能，毕竟是石头永远不会发光(但是金子一定会发光)。</p><p>关于程序员，很多人说是青春饭，这一点我也是深信不疑的，毕竟年轻人比你学东西快，比你身体好，比你能加班，当然最重要的一点他们要的工资比你低，即便你开公司你也会选择这样的人，但这并不是你止步不前的理由，如果同样的工作年限，你的能力比同事强，说明你的学习能力强，正常情况下老板肯定会优先考虑你来转管理的，转型管理是避开青春饭的最佳出路。不过我我问过身边的同事，如果一个技术不如你的人当你的领导你会怎样，大多数人的回答都是肯定不服，当然也有人回答既然人家当上领导就算技术不强肯定也是管理能力特别强，不过紧接着他又说：”这样的人少之又少，毕竟技术不精通却还要管理技术人员确实很难服众”。所以如果你想转管理的话，趁现在好好磨练你的技术吧。</p><p>关于技术的磨练，我觉得最主要的就是效率，效率不仅仅是做得快，还要保证质量，我确实见到过一些人很快的完成需求，然后花费大量时间去改bug，这些人往往还能得到团队和领导的认可，就是因为他们做得快，让大家忽略了质量的问题，而往往就是因为代码的质量无法保证，导致后面入职的新同事天天对离职的老同事问候爹娘😂，后来的人给前面的人”擦屁股”，然后往复循环，这样的结果就是技术债越积越多，当然很多外包项目负责人经常说：”没事，我们这就是一锤子买卖，交付的时候合格了就行，后面的事就不管了”。但是我想说的是这样往往受伤的不光是做项目的人，还有公司，写项目的人做东西没质量得不到提高，接项目的公司因为项目后期出现问题无法给客户完美解决而失去了客户。当然还有与之相反的一类人，干活儿慢到不行，分配任务的时候总说自己负责的东西又麻烦又难，本来正常一天的工作任务，今天没做完，明天又没做完，抱着反正老板和经理不懂技术的心里或者沉浸在认为自己负责的是”最难”的模块晚一两天很正常，全然一副小白兔的既视感。</p><p>当你做到写出的代码又快质量又好的时候，你就应该满足了吗，当然不是，做完了项目，我们要分发，要部署，这些事同样浪费时间，而且是重复的工作，重复的工作一定要脚本化，CI/CD是很成熟的解决办法，配合上SonarQube静态代码审查，我相信你的水平肯定会更上一层楼的。</p><p>我有个学弟曾问过我：”师兄，我觉得搞技术太枯燥了，我爸妈当时就是觉得这一行工资高，非让我报这个”。我相信这样的人不在少数，因为我是从小就对编程有兴趣，所以我在这上面投入了大量的时间，因为每次做完东西的成就感让我感觉特别舒服，除了工作的项目，业余时间利用技术我也做了很多事，幸运的是有那么一票技术特别棒的面试官就喜欢把技术用在生活上的人，毕竟技术源于生活，一个人如果业余的事都做得很精致，工作上的事还会有什么问题吗，如果你是这样的人，你在面试的时候会大大加分的。所以如果你觉得技术枯燥，不妨试试把你学的东西用在生活上，比如用树莓派做个魔镜，手动编译个路由器固件给家里的网络去个广告，或者买一些智能家居组件组一个物联网中心。</p><p>我印象比较深刻的就是我在北京遇到我老大的时候，他就是因为我知道的东西多(虽然都不精通)而对我印象不错的。我本身是个Android开发，业余时间我学习了Linux，编译过AOSP源码，编译过FFMpeg，编译过路由器固件，学习了Shell，搭建了持续集成，学习了Docker，还用自己的服务器玩了虚拟化，组过HomeLab，玩树莓派，然后面试的时候我跟面试官说起这些的时候给我加了很多印象分，当然如果凑巧这个公司可能正好用了你业余时间学过和用过的技术，不要你要谁？同样的经验同样的水平，不要你要谁？</p><p>认识我的人可能都知道我的目标就是全栈。我知道很多人不认可全栈，认为全栈就是全菜，说全栈工程师是哪个都会但是哪个都不深，但我觉得这并不是问题，因为在我的认知里是当你在某个方向很熟练的情况下你就应该往广度发展了，当你会做前端时，你做后端就会知道接口怎么设计才是对前端友好；当你懂devops的时候，你就知道怎么设计配置文件能让项目方便部署和迁移；当你用过多个数据库的时候(肯定不仅仅是CRUD)，你就知道什么时候该用哪个和有什么好处以及有什么坑。只有当你在各个方面都有涉猎的时候，你才能做到最合适的架构就在我心中，因为我心中有架构。如果这时候老板慧眼识珠要选一个人总览全局，不找你找谁？如果没找你的话，不妨打开招聘软件，搜一下”技术总监”、”技术经理”、”架构师”、”CTO”等关键字，相信薪资和需求会满足你的预期。</p><p>最重要的就是你知道自己想要什么，明确了就为之而努力，这样才不会后悔，然后干掉这碗毒鸡汤。</p>]]></content>
      
      
      <categories>
          
          <category> 生活职场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序猿,修养,修炼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot入门</title>
      <link href="/2018/07/31/Spring%20Boot%E5%85%A5%E9%97%A8/"/>
      <url>/2018/07/31/Spring%20Boot%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>我为什么会选择用Spring Boot来做Web项目，主要就是因为它支持yaml格式的配置，配合各种stater插件，让开发者终于不再为眼花缭乱的xml配置文件而头疼了。再加上其内嵌Tomcat，可以免去一些新手配置环境的烦恼。</strong></p><h5 id="后续我会写一系列关于Spring-Cloud的文章，所以今天的Spring-Boot教程是后面的Spring-Cloud的基础。"><a href="#后续我会写一系列关于Spring-Cloud的文章，所以今天的Spring-Boot教程是后面的Spring-Cloud的基础。" class="headerlink" title="后续我会写一系列关于Spring Cloud的文章，所以今天的Spring Boot教程是后面的Spring Cloud的基础。"></a>后续我会写一系列关于<a href="https://projects.spring.io/spring-cloud/" target="_blank" rel="noopener">Spring Cloud</a>的文章，所以今天的Spring Boot教程是后面的Spring Cloud的基础。</h5><h1 id="关于Spring-Boot-官网链接"><a href="#关于Spring-Boot-官网链接" class="headerlink" title="关于Spring Boot 官网链接"></a>关于Spring Boot <a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener">官网链接</a></h1><h5 id="Spring-Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。主要具有如下的特点："><a href="#Spring-Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。主要具有如下的特点：" class="headerlink" title="Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。主要具有如下的特点："></a>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。主要具有如下的特点：</h5><ul><li><strong>嵌入的Tomcat，无需部署WAR文件。</strong></li><li><strong>简化Maven配置。</strong></li><li><strong>自动配置Spring.</strong></li><li><strong>配置多种启动环境(prod,dev,test等)。</strong></li><li><strong>yaml配置。</strong></li></ul><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><h5 id="打开Idea，新建一个Maven项目，填好GroupId-一般是公司或个人域名倒过来写-和ArtifactId-项目标识-以及版本号。然后打开项目目录下的pom-xml"><a href="#打开Idea，新建一个Maven项目，填好GroupId-一般是公司或个人域名倒过来写-和ArtifactId-项目标识-以及版本号。然后打开项目目录下的pom-xml" class="headerlink" title="打开Idea，新建一个Maven项目，填好GroupId(一般是公司或个人域名倒过来写)和ArtifactId(项目标识)以及版本号。然后打开项目目录下的pom.xml"></a>打开Idea，新建一个Maven项目，填好GroupId(一般是公司或个人域名倒过来写)和ArtifactId(项目标识)以及版本号。然后打开项目目录下的pom.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.lizhenghlh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hellospringboot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>1.5.12.RELEASE<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatisplus.spring.boot.version</span>&gt;</span>1.0.5<span class="tag">&lt;/<span class="name">mybatisplus.spring.boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatisplus.version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">mybatisplus.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.11<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.3<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatisplus-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatisplus.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatisplus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun nexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="然后创建HelloApplication"><a href="#然后创建HelloApplication" class="headerlink" title="然后创建HelloApplication"></a>然后创建HelloApplication</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by zhenglee on 2018/7/31.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@SpringBootApplication</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HelloApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">        <span class="keyword">new</span> SpringApplicationBuilder(HelloApplication.class).web(<span class="literal">true</span>).run(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建HelloController</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(<span class="string">"hello"</span>)</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping</span><br><span class="line">    public <span class="built_in">String</span> hello() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, Spring Boot!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="这时候你需要在application-dev-yml中配置好你的数据库配置，包括url，username，password，如果配置正确这时候就可以启动项目了，启动前先创建启动配置，如下图："><a href="#这时候你需要在application-dev-yml中配置好你的数据库配置，包括url，username，password，如果配置正确这时候就可以启动项目了，启动前先创建启动配置，如下图：" class="headerlink" title="这时候你需要在application-dev.yml中配置好你的数据库配置，包括url，username，password，如果配置正确这时候就可以启动项目了，启动前先创建启动配置，如下图："></a>这时候你需要在application-dev.yml中配置好你的数据库配置，包括url，username，password，如果配置正确这时候就可以启动项目了，启动前先创建启动配置，如下图：</h5><p><img src="/img/boot/1.png" alt="1"></p><h5 id="此时在浏览器中输入http-localhost-8080-hello-，就可以看到“Hello-Spring-Boot-”字样代表项目启动成功。"><a href="#此时在浏览器中输入http-localhost-8080-hello-，就可以看到“Hello-Spring-Boot-”字样代表项目启动成功。" class="headerlink" title="此时在浏览器中输入http://localhost:8080/hello ，就可以看到“Hello, Spring Boot!”字样代表项目启动成功。"></a>此时在浏览器中输入<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a> ，就可以看到<strong>“Hello, Spring Boot!”</strong>字样代表项目启动成功。</h5><h5 id="当然仅仅显示一个“Hello-Spring-Boot-”似乎太简单了，下面我继续创建一个BookController用来管理书籍，其中Book的实体，Dao，Service我就不放代码了，有兴趣的可以通过我的Github链接来获取项目的源码，BookController的代码如下："><a href="#当然仅仅显示一个“Hello-Spring-Boot-”似乎太简单了，下面我继续创建一个BookController用来管理书籍，其中Book的实体，Dao，Service我就不放代码了，有兴趣的可以通过我的Github链接来获取项目的源码，BookController的代码如下：" class="headerlink" title="当然仅仅显示一个“Hello, Spring Boot!”似乎太简单了，下面我继续创建一个BookController用来管理书籍，其中Book的实体，Dao，Service我就不放代码了，有兴趣的可以通过我的Github链接来获取项目的源码，BookController的代码如下："></a>当然仅仅显示一个<strong>“Hello, Spring Boot!”</strong>似乎太简单了，下面我继续创建一个BookController用来管理书籍，其中Book的实体，Dao，Service我就不放代码了，有兴趣的可以通过我的<a href="https://github.com/lizhenghlh/hellospringboot.git" target="_blank" rel="noopener">Github链接</a>来获取项目的源码，BookController的代码如下：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.github.lizhenghlh.entity.Book;</span><br><span class="line"><span class="keyword">import</span> io.github.lizhenghlh.entity.Response;</span><br><span class="line"><span class="keyword">import</span> io.github.lizhenghlh.service.BookService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(<span class="string">"books"</span>)</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private BookService bookService;</span><br><span class="line"></span><br><span class="line">    @PostMapping</span><br><span class="line">    public Response add(Book book) &#123;</span><br><span class="line">        bookService.insert(book);</span><br><span class="line">        <span class="keyword">return</span> Response.build().put(<span class="string">"data"</span>, book).success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @DeleteMapping</span><br><span class="line">    public Response <span class="keyword">delete</span>(Long id) &#123;</span><br><span class="line">        bookService.deleteById(id);</span><br><span class="line">        <span class="keyword">return</span> Response.build().success(<span class="string">"删除成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @PutMapping</span><br><span class="line">    public Response update(Book book) &#123;</span><br><span class="line">        final Book exist = bookService.selectById(book.getId());</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == exist) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.build().fail(<span class="string">"不存在此记录"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        bookService.updateById(book);</span><br><span class="line">        <span class="keyword">return</span> Response.build().put(<span class="string">"data"</span>, book).success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping</span><br><span class="line">    public Response list() &#123;</span><br><span class="line">        <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        result.put(<span class="string">"data"</span>, bookService.selectList(<span class="literal">null</span>));</span><br><span class="line">        <span class="keyword">return</span> Response.build(result).success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    public Response findById(@PathVariable Long id) &#123;</span><br><span class="line">        final Book book = bookService.selectById(id);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == book) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.build().fail(<span class="string">"不存在此记录"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Response.build().put(<span class="string">"data"</span>, book).success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="然后重启项目，打开postman或者paw，新建几个测试，一个书籍的增删改查就算做完了。这个项目很简单，没有做过多的严格处理，但是用来理解Web项目肯定是足够了。"><a href="#然后重启项目，打开postman或者paw，新建几个测试，一个书籍的增删改查就算做完了。这个项目很简单，没有做过多的严格处理，但是用来理解Web项目肯定是足够了。" class="headerlink" title="然后重启项目，打开postman或者paw，新建几个测试，一个书籍的增删改查就算做完了。这个项目很简单，没有做过多的严格处理，但是用来理解Web项目肯定是足够了。"></a>然后重启项目，打开postman或者paw，新建几个测试，一个书籍的增删改查就算做完了。这个项目很简单，没有做过多的严格处理，但是用来理解Web项目肯定是足够了。</h5><p><img src="/img/boot/2.png" alt="2"></p><p><img src="/img/boot/3.png" alt="3"></p><p><img src="/img/boot/4.png" alt="4"></p><p><img src="/img/boot/5.png" alt="5"></p><p><img src="/img/boot/6.png" alt="6"></p><h5 id="最后在放下项目的源码链接https-github-com-lizhenghlh-hellospringboot"><a href="#最后在放下项目的源码链接https-github-com-lizhenghlh-hellospringboot" class="headerlink" title="最后在放下项目的源码链接https://github.com/lizhenghlh/hellospringboot"></a>最后在放下项目的源码链接<a href="https://github.com/lizhenghlh/hellospringboot" target="_blank" rel="noopener">https://github.com/lizhenghlh/hellospringboot</a></h5>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>corn表达式</title>
      <link href="/2018/07/30/corn%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2018/07/30/corn%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h5 id="熟悉Linux或者后端开发的同学一定都遇到过执行定时任务的需求，其实不管是Linux下的corntab命令，还是Spring下-Scheduled注解，亦或是Quartz以及其他语言中的定时任务框架，都使用的是类似corn语法的表达式，所以了解corn表达式的语法是很有必要的。"><a href="#熟悉Linux或者后端开发的同学一定都遇到过执行定时任务的需求，其实不管是Linux下的corntab命令，还是Spring下-Scheduled注解，亦或是Quartz以及其他语言中的定时任务框架，都使用的是类似corn语法的表达式，所以了解corn表达式的语法是很有必要的。" class="headerlink" title="熟悉Linux或者后端开发的同学一定都遇到过执行定时任务的需求，其实不管是Linux下的corntab命令，还是Spring下@Scheduled注解，亦或是Quartz以及其他语言中的定时任务框架，都使用的是类似corn语法的表达式，所以了解corn表达式的语法是很有必要的。"></a>熟悉Linux或者后端开发的同学一定都遇到过执行定时任务的需求，其实不管是Linux下的corntab命令，还是Spring下@Scheduled注解，亦或是Quartz以及其他语言中的定时任务框架，都使用的是类似corn语法的表达式，所以了解corn表达式的语法是很有必要的。</h5><h5 id="在了解了corn的表达式语法后可以做些什么："><a href="#在了解了corn的表达式语法后可以做些什么：" class="headerlink" title="在了解了corn的表达式语法后可以做些什么："></a>在了解了corn的表达式语法后可以做些什么：</h5><ul><li><strong>Linux，树莓派，软路由通过配置corntab来执行shell用以定时备份数据库，如果你对抓包很熟悉，你就可以通过抓包来实现某些网站的定时自动签到，我最近就有写PT站自动签到的计划。</strong></li><li><strong>在使用Spring的@Scheduled注解，Quartz，或是其他语言的定时任务框架时，就是小Case了。</strong></li></ul><h5 id="我用corn做了什么："><a href="#我用corn做了什么：" class="headerlink" title="我用corn做了什么："></a>我用corn做了什么：</h5><ul><li><strong>最近我负责的后端项目，有一个需求是定时去请求某个接口获取数据，然后再进行统计分析。</strong></li><li><strong>由于我在大学提供的办公室里上班，没有拉宽带的权限，所以只能使用校园网的Portal认证来上网，但是电脑上登录了账号，手机就不能再登录了；前后端联调的时候也无法通过路由器组建局域网，每天上班第一件事都是登录网页认证这个事我自然无法忍受，所以我写了一个shell脚本自动验证，这样只要执行下脚本就实现了一步认证，再也不用手动打开网页输入账号密码了；而且这个shell脚本只要稍稍改下就可以在路由器上使用，上周末的时候我就动手把X讯的K2路由器刷了OpenWRT，然后安装了curl，最后把脚本scp到路由器里，然后通过corntab建了一个定时任务执行脚本，完美的实现了通过路由器来认证校园网。</strong></li></ul><h3 id="corn表达式："><a href="#corn表达式：" class="headerlink" title="corn表达式："></a>corn表达式：</h3><h5 id="结构：从左到右-空格隔开-：秒-分-时-日-月-星期-年份-年份可选"><a href="#结构：从左到右-空格隔开-：秒-分-时-日-月-星期-年份-年份可选" class="headerlink" title="结构：从左到右(空格隔开)：秒 分 时 日 月 星期 年份(年份可选)"></a>结构：从左到右(空格隔开)：秒 分 时 日 月 星期 年份(年份可选)</h5><h5 id="字段含义："><a href="#字段含义：" class="headerlink" title="字段含义："></a>字段含义：</h5><table><thead><tr><th>字段</th><th>允许值</th><th>允许的特殊字符</th></tr></thead><tbody><tr><td>秒（<em>Seconds</em>）</td><td>0~59</td><td>, - * /</td></tr><tr><td>分（<em>Minutes</em>）</td><td>0~59</td><td>, - * /</td></tr><tr><td>小时（<em>Hours</em>）</td><td>0~23</td><td>, - * /</td></tr><tr><td>日期（<em>DayofMonth</em>）</td><td>1~31</td><td>,- * ? / L W C</td></tr><tr><td>月份（<em>Month</em>）</td><td>1~12或英文月份简写</td><td>, - * /</td></tr><tr><td>星期（<em>DayofWeek</em>）</td><td>1~7或英文星期简写(1代表周日)</td><td>, - * ? / L C #</td></tr><tr><td>年(可选，留空)（<em>Year</em>）</td><td>1970~2099</td><td>, - * /</td></tr></tbody></table><h5 id="常用表达式样例："><a href="#常用表达式样例：" class="headerlink" title="常用表达式样例："></a>常用表达式样例：</h5><table><thead><tr><th>表达式</th><th>含义</th></tr></thead><tbody><tr><td><strong>0 0 2 1 * ? *</strong></td><td>表示在每月的1日的凌晨2点</td></tr><tr><td><strong>0 15 10 ? * MON-FRI</strong></td><td>表示周一到周五每天上午10:15</td></tr><tr><td><strong>0 15 10 ? 6L 2002-2006</strong></td><td>表示2002-2006年的每个月的最后一个星期五上午10:15</td></tr><tr><td><strong>0 0 10,14,16 * * ?</strong></td><td>每天上午10点，下午2点，4点</td></tr><tr><td><strong>0 0/30 9-17 * * ?</strong></td><td>朝九晚五工作时间内每半小时</td></tr><tr><td><strong>0 0 12 ? * WED</strong></td><td>表示每个星期三中午12点</td></tr><tr><td><strong>0 0 12 * * ?</strong></td><td>每天中午12点触发</td></tr><tr><td><strong>0 15 10 ? * *</strong></td><td>每天上午10:15触发</td></tr><tr><td><strong>0 15 10 * * ?</strong></td><td>每天上午10:15触发</td></tr><tr><td><strong>0 15 10 * <em> ? </em></strong></td><td>每天上午10:15触发</td></tr><tr><td><strong>0 15 10 * * ? 2005</strong></td><td>2005年的每天上午10:15触发</td></tr><tr><td><strong>0 * 14 <em> </em> ?</strong></td><td>在每天下午2点到下午2:59期间的每1分钟触发</td></tr><tr><td><strong>0 0/5 14 * * ?</strong></td><td>在每天下午2点到下午2:55期间的每5分钟触发</td></tr><tr><td><strong>0 0/5 14,18 * * ?</strong></td><td>在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</td></tr><tr><td><strong>0 0-5 14 * * ?</strong></td><td>在每天下午2点到下午2:05期间的每1分钟触发</td></tr><tr><td><strong>0 10,44 14 ? 3 WED</strong></td><td>每年三月的星期三的下午2:10和2:44触发</td></tr><tr><td><strong>0 15 10 ? * MON-FRI</strong></td><td>周一至周五的上午10:15触发</td></tr><tr><td><strong>0 15 10 15 * ?</strong></td><td>每月15日上午10:15触发</td></tr><tr><td><strong>0 15 10 L * ?</strong></td><td>每月最后一日的上午10:15触发</td></tr><tr><td><strong>0 15 10 ? * 6L</strong></td><td>每月的最后一个星期五上午10:15触发</td></tr><tr><td><strong>0 15 10 ? * 6L 2002-2005</strong></td><td>2002年至2005年的每月的最后一个星期五上午10:15触发</td></tr><tr><td><strong>0 15 10 ? * 6#3</strong></td><td>每月的第三个星期五上午10:15触发</td></tr></tbody></table><h5 id="其实上述的表达式只要做到随用随查就好，所以最好大家都收藏或者记录下。"><a href="#其实上述的表达式只要做到随用随查就好，所以最好大家都收藏或者记录下。" class="headerlink" title="其实上述的表达式只要做到随用随查就好，所以最好大家都收藏或者记录下。"></a>其实上述的表达式只要做到随用随查就好，所以最好大家都收藏或者记录下。</h5>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> corntab,corn,定时任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ESXi下安装Lede软路由</title>
      <link href="/2018/07/26/ESXi%E4%B8%8B%E5%AE%89%E8%A3%85Lede%E8%BD%AF%E8%B7%AF%E7%94%B1/"/>
      <url>/2018/07/26/ESXi%E4%B8%8B%E5%AE%89%E8%A3%85Lede%E8%BD%AF%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h5 id="上个月把家里的gen8升级到e3-1230-v2和16G-ECC内存，顺便趁着618新入了一块4T的NAS红盘，为的就是能愉快的玩虚拟化。"><a href="#上个月把家里的gen8升级到e3-1230-v2和16G-ECC内存，顺便趁着618新入了一块4T的NAS红盘，为的就是能愉快的玩虚拟化。" class="headerlink" title="上个月把家里的gen8升级到e3 1230 v2和16G ECC内存，顺便趁着618新入了一块4T的NAS红盘，为的就是能愉快的玩虚拟化。"></a>上个月把家里的gen8升级到e3 1230 v2和16G ECC内存，顺便趁着618新入了一块4T的NAS红盘，为的就是能愉快的玩虚拟化。</h5><h5 id="现在家里的gen8已经安装好ESXi-6-5，并且跑着一个Ubuntu16-04和一个群晖6-5。虽然gen8只是微型服务器，但是仅仅跑这两个虚拟机还是绰绰有余的，剩余的技能完全足够再开一个软路由和一台Ubuntu18-04来玩爽了。"><a href="#现在家里的gen8已经安装好ESXi-6-5，并且跑着一个Ubuntu16-04和一个群晖6-5。虽然gen8只是微型服务器，但是仅仅跑这两个虚拟机还是绰绰有余的，剩余的技能完全足够再开一个软路由和一台Ubuntu18-04来玩爽了。" class="headerlink" title="现在家里的gen8已经安装好ESXi 6.5，并且跑着一个Ubuntu16.04和一个群晖6.5。虽然gen8只是微型服务器，但是仅仅跑这两个虚拟机还是绰绰有余的，剩余的技能完全足够再开一个软路由和一台Ubuntu18.04来玩爽了。"></a>现在家里的gen8已经安装好ESXi 6.5，并且跑着一个Ubuntu16.04和一个群晖6.5。虽然gen8只是微型服务器，但是仅仅跑这两个虚拟机还是绰绰有余的，剩余的技能完全足够再开一个软路由和一台Ubuntu18.04来玩爽了。</h5><h5 id="昨晚已经收到在深水宝买的8口千兆交换机，支持网管和链路聚合。"><a href="#昨晚已经收到在深水宝买的8口千兆交换机，支持网管和链路聚合。" class="headerlink" title="昨晚已经收到在深水宝买的8口千兆交换机，支持网管和链路聚合。"></a>昨晚已经收到在深水宝买的8口千兆交换机，支持网管和链路聚合。</h5><h5 id="先说下我使用软路由的需求，基本跟我使用梅林的需求一样，因为现在家里使用的是网件的路由器刷的梅林固件，我使用的插件主要有："><a href="#先说下我使用软路由的需求，基本跟我使用梅林的需求一样，因为现在家里使用的是网件的路由器刷的梅林固件，我使用的插件主要有：" class="headerlink" title="先说下我使用软路由的需求，基本跟我使用梅林的需求一样，因为现在家里使用的是网件的路由器刷的梅林固件，我使用的插件主要有："></a>先说下我使用软路由的需求，基本跟我使用梅林的需求一样，因为现在家里使用的是网件的路由器刷的梅林固件，我使用的插件主要有：</h5><ul><li><p><strong><em>酸酸乳</em></strong>(你懂得，走GFW List模式，畅游真正的互联网)</p></li><li><p><strong><em>KoolProxy</em></strong>(过滤广告，看个视频要一分多钟的广告，你能忍吗)</p></li><li><p><strong><em>Aliddns</em></strong>(有公网IP谁还用花生壳和Ngrok)</p></li><li><p><strong><em>自动签到</em></strong>(支持的大多数主流网站，但是不支持PT站，所以后面打算自己写PT站自动签到的shell，通过corntab来执行)</p></li></ul><h5 id="至于为什么要切换到软路由呢，主要就是R6400每次开启KoolProxy都会造成网速慢很多，有时候连图片都加载不出来，我猜测可能是R6400机能太弱或者KoolProxy优化的不好的原因，切到软路由的话，R6400只要专心的做一个AP就好了。"><a href="#至于为什么要切换到软路由呢，主要就是R6400每次开启KoolProxy都会造成网速慢很多，有时候连图片都加载不出来，我猜测可能是R6400机能太弱或者KoolProxy优化的不好的原因，切到软路由的话，R6400只要专心的做一个AP就好了。" class="headerlink" title="至于为什么要切换到软路由呢，主要就是R6400每次开启KoolProxy都会造成网速慢很多，有时候连图片都加载不出来，我猜测可能是R6400机能太弱或者KoolProxy优化的不好的原因，切到软路由的话，R6400只要专心的做一个AP就好了。"></a>至于为什么要切换到软路由呢，主要就是R6400每次开启KoolProxy都会造成网速慢很多，有时候连图片都加载不出来，我猜测可能是R6400机能太弱或者KoolProxy优化的不好的原因，切到软路由的话，R6400只要专心的做一个AP就好了。</h5><h5 id="上网调研了一下，目前软路由主要有Lede，爱快，海蜘蛛等等，最终我选择的是Lede。"><a href="#上网调研了一下，目前软路由主要有Lede，爱快，海蜘蛛等等，最终我选择的是Lede。" class="headerlink" title="上网调研了一下，目前软路由主要有Lede，爱快，海蜘蛛等等，最终我选择的是Lede。"></a>上网调研了一下，目前软路由主要有Lede，爱快，海蜘蛛等等，最终我选择的是Lede。</h5><h5 id="其实Lede也就是现在的OpenWRT，因为又合并到一起了。😂"><a href="#其实Lede也就是现在的OpenWRT，因为又合并到一起了。😂" class="headerlink" title="其实Lede也就是现在的OpenWRT，因为又合并到一起了。😂"></a>其实Lede也就是现在的OpenWRT，因为又合并到一起了。😂</h5><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol><li><p>打开固件<a href="http://firmware.koolshare.cn/LEDE_X64_fw867/%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BD%AC%E7%9B%98%E6%88%96PE%E4%B8%8B%E5%86%99%E7%9B%98%E4%B8%93%E7%94%A8/" target="_blank" rel="noopener">下载链接</a>，选择版本，我下载的是v2.6的版本，下载后解压出img文件。但是安装完之后我才知道Lede已经合并回OpenWrt，所以你可以直接下载OpenWrt的2.15版本。</p></li><li><p>下载StarWind V2V Converter并安装，打开后</p><p><img src="/img/lede/1.png" alt="1"><br><img src="/img/lede/2.png" alt="2"></p><p><img src="/img/lede/3.png" alt="3"></p><p><img src="/img/lede/4.png" alt="4"></p><p><img src="/img/lede/5.png" alt="5"></p><p><img src="/img/lede/6.png" alt="6"></p><p><img src="/img/lede/7.png" alt="7"></p><p>生成了2个文件，这时候登录ESXi的web管理界面，在数据存储浏览器中将刚才生成的文件上传进去，上传完成之后你会发现两个文件变成了一个，这是正常的。</p></li><li><p>在web界面的网络节点中选中vSwitch0，然后点击右边的编辑设置，按下图设置好保存：</p><p><img src="/img/lede/s1.png" alt="s1"></p></li><li><p>添加一个新的虚拟交换机vSwitch1，按下图设置后点击添加：</p><p><img src="/img/lede/s2.png" alt="s2"></p></li><li><p>添加端口组，并关联至vSwitch1，如下图：</p><p><img src="/img/lede/s3.png" alt="s3"></p></li><li><p>注册新的虚拟机，选择<strong>Linux类型</strong>，操作系统选择“<strong>其他Linux 64位</strong>”，删掉默认分配的硬盘，选择我们刚才上传的<strong>lede-v2.6.vmdk</strong>，然后添加新的网络适配器并选择刚才创建的<strong>VM Network1</strong>，然后保存。</p></li><li><p>此时先选中刚刚创建好的lede虚拟机右键—&gt;自动启动—&gt;开启。</p></li><li><p>这时候主要打开虚拟机的电源就好了，然后查看控制台，直到控制台不在刷新的时候敲一下回车，你会看到下图：</p><p><img src="/img/lede/l1.png" alt="l1"></p></li><li><p>距离成功只差一步了，那就是设置路由器的LAN IP ，控制台上键入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/config</span><br><span class="line">cp network network.bak</span><br><span class="line">vim /etc/config/network</span><br></pre></td></tr></table></figure><p>上述代码的第二步是为了备份配置文件，出错的时候只有恢复下即可，紧接着就是修改IP了，我设置的<code>192.168.0.1</code>，当然你可以根据自己的喜好设置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">config interface <span class="string">'loopback'</span></span><br><span class="line">option ifname <span class="string">'lo'</span></span><br><span class="line">option proto <span class="string">'static'</span></span><br><span class="line">option ipaddr <span class="string">'127.0.0.1'</span></span><br><span class="line">option netmask <span class="string">'255.0.0.0'</span></span><br><span class="line"></span><br><span class="line">config globals <span class="string">'globals'</span></span><br><span class="line">option ula_prefix <span class="string">'fd07:0156:b6bb::/48'</span></span><br><span class="line"></span><br><span class="line">config interface <span class="string">'lan'</span></span><br><span class="line">option <span class="built_in">type</span> <span class="string">'bridge'</span></span><br><span class="line">option ifname <span class="string">'eth0 eth1 eth2 eth3'</span></span><br><span class="line">option proto <span class="string">'static'</span></span><br><span class="line">option ipaddr <span class="string">'192.168.0.1'</span></span><br><span class="line">option netmask <span class="string">'255.255.255.0'</span></span><br><span class="line">option ip6assign <span class="string">'60'</span></span><br><span class="line"></span><br><span class="line">config interface <span class="string">'wan'</span></span><br><span class="line">option ifname <span class="string">'eth4'</span></span><br><span class="line">option proto <span class="string">'dhcp'</span></span><br><span class="line"></span><br><span class="line">config interface <span class="string">'wan6'</span></span><br><span class="line">option ifname <span class="string">'eth4'</span></span><br><span class="line">option proto <span class="string">'dhcpv6'</span></span><br></pre></td></tr></table></figure><p>设置好LAN IP后，还需要重启网络服务，键入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/network restart</span><br></pre></td></tr></table></figure></li><li><p>万事俱备只欠东风了，最后就是访问<a href="http://192.168.0.1" target="_blank" rel="noopener">http://192.168.0.1</a> ，如果让提示让你输入密码，恭喜你，Lede安装完成，如下图所示：</p><p><img src="/img/lede/l2.png" alt="l2"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> ESXi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESXi,Lede,软路由,OpenWRT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http返回200,status却是failed</title>
      <link href="/2018/07/25/http%E8%BF%94%E5%9B%9E200-status%E5%8D%B4%E6%98%AFfailed/"/>
      <url>/2018/07/25/http%E8%BF%94%E5%9B%9E200-status%E5%8D%B4%E6%98%AFfailed/</url>
      
        <content type="html"><![CDATA[<p><strong>今天刚到公司，就有前端同学说刚部署的前端代码在访问的时候网页一篇空白，我部署了一版一看，还真是这样，再三确认前端同学在本地构建并访问没有任何问题，紧接着微信就响起来了，其他兄弟公司的项目也都出了问题，我赶紧打开网页查看，果然所有网页都是空白，更神奇的是Chrome报了如下的问题：</strong></p><p><img src="/img/za/1.jpeg" alt="status显示failed"><br><img src="/img/za/2.jpeg" alt="http code显示200"><br><strong>文档状态显示failed，但是http状态码确是200。😂</strong><br><strong>这真是奇了怪了，我问后端同学也没人见过这样的问题。</strong></p><p><strong>紧接着我去查看Nginx的log，也没发现什么问题。这时候微信和电话已经开始轮番轰炸了，大家都在问项目怎么访问不了。最后只得一级一级的排查，在最后ssh登录网关机查看Nginx的时候，我刚输入<code>cd</code>，再按tab键补全路径的时候，系统显示如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cannot create temp file <span class="keyword">for</span> here-document: No space left on device</span><br></pre></td></tr></table></figure><p><strong>原来是磁盘空间不足了，所以Nginx无法完成中转，直觉告诉我应该是系统内的Docker镜像太多了，当键入<code>docker images</code>的时候，好么，果然问题在这，再删除了一些不用的镜像后，问题解决，所有网站恢复正常。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 疑难杂症 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 疑难杂症 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node小提示</title>
      <link href="/2018/07/23/Node%E5%B0%8F%E6%8F%90%E7%A4%BA/"/>
      <url>/2018/07/23/Node%E5%B0%8F%E6%8F%90%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h5 id="在做开发的过程中，经常会遇到一些场景使用到Node，比如构建前端项目或者使用Hexo写博客，这批文章主要记录我在使用Node过程中遇到的一些问题和解决方案。"><a href="#在做开发的过程中，经常会遇到一些场景使用到Node，比如构建前端项目或者使用Hexo写博客，这批文章主要记录我在使用Node过程中遇到的一些问题和解决方案。" class="headerlink" title="在做开发的过程中，经常会遇到一些场景使用到Node，比如构建前端项目或者使用Hexo写博客，这批文章主要记录我在使用Node过程中遇到的一些问题和解决方案。"></a>在做开发的过程中，经常会遇到一些场景使用到Node，比如构建前端项目或者使用Hexo写博客，这批文章主要记录我在使用Node过程中遇到的一些问题和解决方案。</h5><h1 id="NPM相关"><a href="#NPM相关" class="headerlink" title="NPM相关"></a>NPM相关</h1><h5 id="使用Node就必不可少的会使用到npm，但是因为一些你知我知的原因，我们的网络访问npm的速度是很感人的，通常我们会选择使用cnpm来加速。"><a href="#使用Node就必不可少的会使用到npm，但是因为一些你知我知的原因，我们的网络访问npm的速度是很感人的，通常我们会选择使用cnpm来加速。" class="headerlink" title="使用Node就必不可少的会使用到npm，但是因为一些你知我知的原因，我们的网络访问npm的速度是很感人的，通常我们会选择使用cnpm来加速。"></a>使用Node就必不可少的会使用到npm，但是因为一些你知我知的原因，我们的网络访问npm的速度是很感人的，通常我们会选择使用cnpm来加速。</h5><h3 id="cnpm："><a href="#cnpm：" class="headerlink" title="cnpm："></a>cnpm：</h3><h5 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h5 id="之后我们在执行npm命令时，只要将npm替换为cnpm即可。"><a href="#之后我们在执行npm命令时，只要将npm替换为cnpm即可。" class="headerlink" title="之后我们在执行npm命令时，只要将npm替换为cnpm即可。"></a>之后我们在执行npm命令时，只要将npm替换为cnpm即可。</h5><h5 id="原命令："><a href="#原命令：" class="headerlink" title="原命令："></a>原命令：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i//npm install的简写</span><br></pre></td></tr></table></figure><h5 id="现命令："><a href="#现命令：" class="headerlink" title="现命令："></a>现命令：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i//cnpm install的简写</span><br></pre></td></tr></table></figure><h3 id="yarn"><a href="#yarn" class="headerlink" title="yarn:"></a>yarn:</h3><h5 id="yarn是我最喜欢的工具，也是我一直在用的。"><a href="#yarn是我最喜欢的工具，也是我一直在用的。" class="headerlink" title="yarn是我最喜欢的工具，也是我一直在用的。"></a>yarn是我最喜欢的工具，也是我一直在用的。</h5><h5 id="安装yarn，Ubuntu的安装命令："><a href="#安装yarn，Ubuntu的安装命令：" class="headerlink" title="安装yarn，Ubuntu的安装命令："></a>安装yarn，Ubuntu的安装命令：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb https://dl.yarnpkg.com/debian/ stable main"</span> | sudo tee /etc/apt/sources.list.d/yarn.list</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install yarn</span><br></pre></td></tr></table></figure><h5 id="Mac的安装命令："><a href="#Mac的安装命令：" class="headerlink" title="Mac的安装命令："></a>Mac的安装命令：</h5><ul><li>通过Homebrew：    <code>brew install yarn</code>  </li><li>通过Port：    <code>sudo port install yarn</code></li></ul><h5 id="安装完成后执行yarn-version即可查看版本信息。"><a href="#安装完成后执行yarn-version即可查看版本信息。" class="headerlink" title="安装完成后执行yarn --version即可查看版本信息。"></a>安装完成后执行<code>yarn --version</code>即可查看版本信息。</h5><h5 id="然后用yarn命令代替npm即可。"><a href="#然后用yarn命令代替npm即可。" class="headerlink" title="然后用yarn命令代替npm即可。"></a>然后用yarn命令代替npm即可。</h5><h5 id="原命令"><a href="#原命令" class="headerlink" title="原命令:"></a>原命令:</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h5 id="现命令：-1"><a href="#现命令：-1" class="headerlink" title="现命令："></a>现命令：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn//连install和i都省了😁</span><br></pre></td></tr></table></figure><h4 id="yarn小技巧："><a href="#yarn小技巧：" class="headerlink" title="yarn小技巧："></a>yarn小技巧：</h4><h5 id="用淘宝的源替换yarn的官方源："><a href="#用淘宝的源替换yarn的官方源：" class="headerlink" title="用淘宝的源替换yarn的官方源："></a>用淘宝的源替换yarn的官方源：</h5><h5 id="执行yarn-config-get-registry我们可以发现yarn的官方源是https-registry-yarnpkg-com，我们执行yarn-config-set-registry-https-registry-npm-taobao-org。这样一来yarn安装依赖的速度会快很多。"><a href="#执行yarn-config-get-registry我们可以发现yarn的官方源是https-registry-yarnpkg-com，我们执行yarn-config-set-registry-https-registry-npm-taobao-org。这样一来yarn安装依赖的速度会快很多。" class="headerlink" title="执行yarn config get registry我们可以发现yarn的官方源是https://registry.yarnpkg.com，我们执行yarn config set registry https://registry.npm.taobao.org。这样一来yarn安装依赖的速度会快很多。"></a>执行<code>yarn config get registry</code>我们可以发现yarn的官方源是<strong><a href="https://registry.yarnpkg.com" target="_blank" rel="noopener">https://registry.yarnpkg.com</a></strong>，我们执行<code>yarn config set registry https://registry.npm.taobao.org</code>。这样一来yarn安装依赖的速度会快很多。</h5><h1 id="Node小技巧"><a href="#Node小技巧" class="headerlink" title="Node小技巧"></a>Node小技巧</h1><p>有时候我需要搭建一个静态文件服务器来查看html网页或者文件，这时候如果去配置Nginx的话不免有些大材小用，这时候一个简单的node文件就可以解决，新建文件，文件内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> connect = <span class="built_in">require</span>(<span class="string">"connect"</span>);</span><br><span class="line"><span class="keyword">var</span> serveStatic = <span class="built_in">require</span>(<span class="string">"serve-static"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = connect();</span><br><span class="line">app.use(serveStatic(<span class="string">"/home/zhenglee/node/demo/dist"</span>));<span class="comment">//静态文件目录</span></span><br><span class="line">app.listen(<span class="number">5000</span>);<span class="comment">//端口</span></span><br></pre></td></tr></table></figure><p>保存为httpserver.js，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm install connect serve-static</span><br><span class="line">node httpserver.js</span><br></pre></td></tr></table></figure><p>这时候打开网页，访问<a href="http://localhost:5000" target="_blank" rel="noopener">http://localhost:5000</a> 即可。</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node,npm,cnpm,yarn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker环境搭建</title>
      <link href="/2018/07/20/Docker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/07/20/Docker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h5 id="相信不管你是刚踏入互联网圈，还是已经摸爬滚打了几年，你一定听说过容器技术。但是要说当下最火的容器技术是什么，技术人员一定异口同声的回答-”Docker“。"><a href="#相信不管你是刚踏入互联网圈，还是已经摸爬滚打了几年，你一定听说过容器技术。但是要说当下最火的容器技术是什么，技术人员一定异口同声的回答-”Docker“。" class="headerlink" title="相信不管你是刚踏入互联网圈，还是已经摸爬滚打了几年，你一定听说过容器技术。但是要说当下最火的容器技术是什么，技术人员一定异口同声的回答:”Docker“。"></a>相信不管你是刚踏入互联网圈，还是已经摸爬滚打了几年，你一定听说过容器技术。但是要说当下最火的容器技术是什么，技术人员一定异口同声的回答:”<strong><em>Docker</em></strong>“。</h5><h5 id="什么样的技术人员适合学Docker呢？我认为后端同学和对新技术敏感的同学最合适，这样才能跟得上技术的潮流，使自己不被淘汰。当然正在上学的学生学习Docker对自己找实习机会和找工作也会十分有利的，毕竟技多不压身。"><a href="#什么样的技术人员适合学Docker呢？我认为后端同学和对新技术敏感的同学最合适，这样才能跟得上技术的潮流，使自己不被淘汰。当然正在上学的学生学习Docker对自己找实习机会和找工作也会十分有利的，毕竟技多不压身。" class="headerlink" title="什么样的技术人员适合学Docker呢？我认为后端同学和对新技术敏感的同学最合适，这样才能跟得上技术的潮流，使自己不被淘汰。当然正在上学的学生学习Docker对自己找实习机会和找工作也会十分有利的，毕竟技多不压身。"></a>什么样的技术人员适合学Docker呢？我认为后端同学和对新技术敏感的同学最合适，这样才能跟得上技术的潮流，使自己不被淘汰。当然正在上学的学生学习Docker对自己找实习机会和找工作也会十分有利的，毕竟技多不压身。</h5><h5 id="关于的Docker的详细介绍在网上已经多得不能再多了，大家只要百度或者Google一下就能获取到大量的资料，所以我就不在这详细介绍了，下面我就说下我在工作中为什么会选择Docker："><a href="#关于的Docker的详细介绍在网上已经多得不能再多了，大家只要百度或者Google一下就能获取到大量的资料，所以我就不在这详细介绍了，下面我就说下我在工作中为什么会选择Docker：" class="headerlink" title="关于的Docker的详细介绍在网上已经多得不能再多了，大家只要百度或者Google一下就能获取到大量的资料，所以我就不在这详细介绍了，下面我就说下我在工作中为什么会选择Docker："></a>关于的Docker的详细介绍在网上已经多得不能再多了，大家只要百度或者Google一下就能获取到大量的资料，所以我就不在这详细介绍了，下面我就说下我在工作中为什么会选择Docker：</h5><ul><li><strong>方便部署、交付、迁移、测试，总结起来就是方便持续集成持续交付部署。</strong></li><li><strong>启动迅速，秒级的启动速度远远胜过了虚拟机，启动后占用的系统资源也更少。</strong></li></ul><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><h3 id="场景1"><a href="#场景1" class="headerlink" title="场景1"></a>场景1</h3><h5 id="还记得上学的时候，学习新语言的第一天老师总会教大家如何搭建环境。比如在安装Mysql的时候，学校机房的电脑，你自己的笔记本，再加上各种不一样的Windows版本，不同的Linux发行版，总是让学生出现各种各样的问题。"><a href="#还记得上学的时候，学习新语言的第一天老师总会教大家如何搭建环境。比如在安装Mysql的时候，学校机房的电脑，你自己的笔记本，再加上各种不一样的Windows版本，不同的Linux发行版，总是让学生出现各种各样的问题。" class="headerlink" title="还记得上学的时候，学习新语言的第一天老师总会教大家如何搭建环境。比如在安装Mysql的时候，学校机房的电脑，你自己的笔记本，再加上各种不一样的Windows版本，不同的Linux发行版，总是让学生出现各种各样的问题。"></a>还记得上学的时候，学习新语言的第一天老师总会教大家如何搭建环境。比如在安装Mysql的时候，学校机房的电脑，你自己的笔记本，再加上各种不一样的Windows版本，不同的Linux发行版，总是让学生出现各种各样的问题。</h5><h5 id="如果那时候Docker存在的话就轻松解决了这个问题，我只要安装好Docker，然后执行下"><a href="#如果那时候Docker存在的话就轻松解决了这个问题，我只要安装好Docker，然后执行下" class="headerlink" title="如果那时候Docker存在的话就轻松解决了这个问题，我只要安装好Docker，然后执行下"></a>如果那时候Docker存在的话就轻松解决了这个问题，我只要安装好Docker，然后执行下</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br><span class="line">docker run -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</span><br></pre></td></tr></table></figure><h5 id="好了，一个root密码为123456的mysql服务就这样搭建好了，最多出现端口占用的问题，换个端口在执行一次即可。"><a href="#好了，一个root密码为123456的mysql服务就这样搭建好了，最多出现端口占用的问题，换个端口在执行一次即可。" class="headerlink" title="好了，一个root密码为123456的mysql服务就这样搭建好了，最多出现端口占用的问题，换个端口在执行一次即可。"></a>好了，一个root密码为123456的mysql服务就这样搭建好了，最多出现端口占用的问题，换个端口在执行一次即可。</h5><hr><h5 id="假如你现在需要跑某个开源的Demo，但是这个Demo使用的数据库你的电脑没有安装，。以PostgreSQL为例，这时候你只要执行下"><a href="#假如你现在需要跑某个开源的Demo，但是这个Demo使用的数据库你的电脑没有安装，。以PostgreSQL为例，这时候你只要执行下" class="headerlink" title="假如你现在需要跑某个开源的Demo，但是这个Demo使用的数据库你的电脑没有安装，。以PostgreSQL为例，这时候你只要执行下"></a>假如你现在需要跑某个开源的Demo，但是这个Demo使用的数据库你的电脑没有安装，。以<strong>PostgreSQL</strong>为例，这时候你只要执行下</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull postgres</span><br><span class="line">docker run -p 5432:5432 -e POSTGRES_PASSWORD=123456 -d postgres</span><br></pre></td></tr></table></figure><h5 id="一个密码为123456，端口为5432的postgres服务就有了。"><a href="#一个密码为123456，端口为5432的postgres服务就有了。" class="headerlink" title="一个密码为123456，端口为5432的postgres服务就有了。"></a>一个密码为123456，端口为5432的postgres服务就有了。</h5><h5 id="当然你还可以指定各种版本，这样就相当于在电脑或服务器中装了多个版本的服务。"><a href="#当然你还可以指定各种版本，这样就相当于在电脑或服务器中装了多个版本的服务。" class="headerlink" title="当然你还可以指定各种版本，这样就相当于在电脑或服务器中装了多个版本的服务。"></a>当然你还可以指定各种版本，这样就相当于在电脑或服务器中装了多个版本的服务。</h5><h3 id="场景3"><a href="#场景3" class="headerlink" title="场景3"></a>场景3</h3><h5 id="现在后端最火的技术当属微服务了。以电商项目为例，在商促期间访问压力大的模块都在秒杀上，这时候如果我们采用了Docker镜像来部署，只需要重新启动一个或者多个秒杀模块就解决了问题，在商促结束后停止掉额外启动的秒杀模块，这样就达到了弹性伸缩的目的，节省了服务器的资源。"><a href="#现在后端最火的技术当属微服务了。以电商项目为例，在商促期间访问压力大的模块都在秒杀上，这时候如果我们采用了Docker镜像来部署，只需要重新启动一个或者多个秒杀模块就解决了问题，在商促结束后停止掉额外启动的秒杀模块，这样就达到了弹性伸缩的目的，节省了服务器的资源。" class="headerlink" title="现在后端最火的技术当属微服务了。以电商项目为例，在商促期间访问压力大的模块都在秒杀上，这时候如果我们采用了Docker镜像来部署，只需要重新启动一个或者多个秒杀模块就解决了问题，在商促结束后停止掉额外启动的秒杀模块，这样就达到了弹性伸缩的目的，节省了服务器的资源。"></a>现在后端最火的技术当属<a href="https://baike.baidu.com/item/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/18705784?fr=aladdin" target="_blank" rel="noopener">微服务</a>了。以电商项目为例，在商促期间访问压力大的模块都在秒杀上，这时候如果我们采用了Docker镜像来部署，只需要重新启动一个或者多个秒杀模块就解决了问题，在商促结束后停止掉额外启动的秒杀模块，这样就达到了弹性伸缩的目的，节省了服务器的资源。</h5><h1 id="安装Docker官网文档"><a href="#安装Docker官网文档" class="headerlink" title="安装Docker官网文档"></a>安装Docker<a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/#docker-ee-customers" target="_blank" rel="noopener">官网文档</a></h1><h5 id="因为我家里的服务器使用ESXi跑着一个Ubuntu的实例，我就以Ubuntu为例子"><a href="#因为我家里的服务器使用ESXi跑着一个Ubuntu的实例，我就以Ubuntu为例子" class="headerlink" title="因为我家里的服务器使用ESXi跑着一个Ubuntu的实例，我就以Ubuntu为例子"></a>因为我家里的服务器使用ESXi跑着一个Ubuntu的实例，我就以Ubuntu为例子</h5><ol><li><p>更新安装源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure></li><li><p>添加GPG key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure></li><li><p>验证GPG key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key fingerprint 0EBFCD88</span><br></pre></td></tr></table></figure></li><li><p>添加官方源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository \</span><br><span class="line">   <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">   <span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">   stable"</span></span><br></pre></td></tr></table></figure></li><li><p>再次更新安装源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>安装docker-ce</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure></li><li><p>运行hello-world</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure></li><li><p>如果屏幕上出现了 “<strong>Hello from Docker!</strong>“ 字样，恭喜你，安装成功。</p><p>如果你以为到了这一步就完事的话，那你真是图样图森破了，由于一些大家都懂得的原因，在国内访问外网的Docker Hub并没有什么速度，好在国内有加速镜像可以配置。我使用的是<a href="https://www.daocloud.io/" target="_blank" rel="noopener">DaoCloud</a>，在这个网站注册后打开<a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="noopener">加速镜像的链接</a>，执行网页上给的命令即可。至此，Docker的安装和配置加速镜像就彻底结束了。</p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h5 id="今天仅仅是介绍了如何安装Docker和配置加速器，后面我还会分享一些Docker在具体项目中应用，敬请期待。"><a href="#今天仅仅是介绍了如何安装Docker和配置加速器，后面我还会分享一些Docker在具体项目中应用，敬请期待。" class="headerlink" title="今天仅仅是介绍了如何安装Docker和配置加速器，后面我还会分享一些Docker在具体项目中应用，敬请期待。"></a>今天仅仅是介绍了如何安装Docker和配置加速器，后面我还会分享一些Docker在具体项目中应用，敬请期待。</h5>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Go!</title>
      <link href="/2018/07/19/Hello%20Go/"/>
      <url>/2018/07/19/Hello%20Go/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h5 id="要说当下什么语言最火，coder们自然而然就想到了Google爸爸推出的语言Go。"><a href="#要说当下什么语言最火，coder们自然而然就想到了Google爸爸推出的语言Go。" class="headerlink" title="要说当下什么语言最火，coder们自然而然就想到了Google爸爸推出的语言Go。"></a>要说当下什么语言最火，coder们自然而然就想到了Google爸爸推出的语言Go。</h5><h1 id="关于Go-官网链接"><a href="#关于Go-官网链接" class="headerlink" title="关于Go 官网链接"></a>关于Go <a href="https://golang.org/" target="_blank" rel="noopener">官网链接</a></h1><h5 id="Go是一种新的语言，一种并发的、带垃圾回收的、快速编译的语言。它具有以下特点："><a href="#Go是一种新的语言，一种并发的、带垃圾回收的、快速编译的语言。它具有以下特点：" class="headerlink" title="Go是一种新的语言，一种并发的、带垃圾回收的、快速编译的语言。它具有以下特点："></a>Go是一种新的语言，一种并发的、带垃圾回收的、快速编译的语言。它具有以下特点：</h5><ul><li><p><strong>它可以在一台计算机上用几秒钟的时间编译一个大型的Go程序。</strong></p></li><li><p><strong>Go为软件构造提供了一种模型，它使依赖分析更加容易，且避免了大部分C风格include文件与库的开头。</strong></p></li><li><p><strong>Go是静态类型的语言，它的类型系统没有层级。因此用户不需要在定义类型之间的关系上花费时间，这样感觉起来比典型的面向对象语言更轻量级。</strong></p></li><li><p><strong>Go完全是垃圾回收型的语言，并为并发执行与通信提供了基本的支持。按照其设计，Go打算为多核机器上系统软件的构造提供一种方法。</strong></p></li></ul><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h5 id="由于我使用的是MacBook，所以我就以MacBook为例进行环境搭建，Linux应该是差不多的步骤。"><a href="#由于我使用的是MacBook，所以我就以MacBook为例进行环境搭建，Linux应该是差不多的步骤。" class="headerlink" title="由于我使用的是MacBook，所以我就以MacBook为例进行环境搭建，Linux应该是差不多的步骤。"></a>由于我使用的是MacBook，所以我就以MacBook为例进行环境搭建，Linux应该是差不多的步骤。</h5><p><strong>打开<a href="https://golang.org/dl/" target="_blank" rel="noopener">此链接</a>，选择对于的平台的版本，我选择的是go1.10.3.darwin-amd64.tar.gz</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.google.com/go/go1.10.3.darwin-amd64.tar.gz</span><br></pre></td></tr></table></figure><p><strong>下载后解压到 /usr/local 目录下</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -C /usr/<span class="built_in">local</span> -xvf go1.10.3.darwin-amd64.tar.gz</span><br></pre></td></tr></table></figure><p><strong>配置环境变量，可以在/etc/profile处或者~/bashrc处以及~/zshrc处编辑</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GO_HOME=<span class="string">"/usr/local/go"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$GO_HOME</span>/bin"</span></span><br></pre></td></tr></table></figure><p><strong>然后source &lt;你配置环境变量的地方&gt;，在命令行下执行go，有返回即是环境搭建完毕。</strong></p><h1 id="运行你的第一个Go语言程序"><a href="#运行你的第一个Go语言程序" class="headerlink" title="运行你的第一个Go语言程序"></a>运行你的第一个Go语言程序</h1><p><strong>打开vscode或者sublime编辑器，输入以下代码，保存为helloworld.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello, Go"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>然后执行下面的命令</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> run helloworld.<span class="keyword">go</span></span><br></pre></td></tr></table></figure><p><strong>至此，你的第一个Go语言程序就完成了。</strong> </p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h1><h3 id="个人简介"><a href="#个人简介" class="headerlink" title="个人简介"></a>个人简介</h3><ul><li><p><strong>一枚生命不息，折腾不止的程序猿。</strong></p></li><li><p><strong>现在主要从事Android，Java Web，Devops工作。</strong></p></li><li><p><strong>崇尚万物基于Linux。</strong></p></li><li><p><strong>热爱互联网，热爱编程，喜欢挑战新技术。</strong></p></li></ul><h3 id="工作技能树"><a href="#工作技能树" class="headerlink" title="工作技能树"></a>工作技能树</h3><ul><li><strong>Android</strong><ul><li><strong>GPS</strong></li><li><strong>LBS</strong></li><li><strong>电商</strong></li><li><strong>即时通讯</strong></li><li><strong>支付(微信，支付宝)</strong></li><li><strong>Hybrid混合开发</strong></li><li><strong>反编译</strong></li><li><strong>Kotlin</strong></li><li><strong>RxAndroid</strong></li></ul></li><li><strong>Java Web</strong>  <ul><li><strong>Spring Boot </strong></li><li><strong>Spring Cloud微服务全家桶 </strong></li><li><strong>Restful</strong></li><li><strong>Http</strong></li><li><strong>MyBatis</strong> </li><li><strong>Tomcat</strong></li><li><strong>Swagger</strong></li><li><strong>Api 加密</strong></li><li><strong>POI文档处理</strong></li><li><strong>数据库</strong></li><li><strong>微信公众号开发</strong></li></ul></li><li><strong>Devops</strong> <ul><li><strong>Linux </strong><ul><li><strong>日常维护</strong></li><li><strong>各语言环境搭建</strong></li><li><strong>Shell脚本</strong></li><li><strong>Nginx</strong></li></ul></li><li><strong>Github  , GitLab </strong><ul><li><strong>通过WebHook实现持续集成</strong></li></ul></li><li><strong>Jenkins</strong><ul><li><strong>Android自动构建</strong></li><li><strong>iOS自动构建</strong></li><li><strong>Web自动构建</strong></li></ul></li><li><strong>Docker</strong> <ul><li><strong>Dockerfile编写</strong></li><li><strong>Docker-Compose服务编排</strong></li><li><strong>私有仓库搭建</strong></li></ul></li><li><strong>Jira</strong> <ul><li><strong>基于Scrum的敏捷开发管理</strong></li></ul></li><li><strong>SonarQube</strong> <ul><li><strong>静态代码检查</strong></li></ul></li><li><strong>ELK</strong><ul><li><strong>日志搜集分析</strong></li></ul></li></ul></li></ul><h3 id="生活技能树"><a href="#生活技能树" class="headerlink" title="生活技能树"></a>生活技能树</h3><ul><li><strong>服务器(我个人在家里维护了一台7*24小时的HP Gen8服务器)</strong><ul><li><strong>ESXi</strong><ul><li><strong>HomeLab</strong></li><li><strong>Ubuntu(主要用来给黑群晖提供NFS服务。Docker , Git , 充当测试服务器)</strong></li><li><strong>黑群晖(主要用来混PT和配合玩影音😁)</strong></li><li><strong>软路由(OpenWRT)</strong></li></ul></li></ul></li><li><strong>路由器</strong><ul><li><strong>固件编译，烧录</strong></li><li><strong>内网穿透</strong></li><li><strong>端口转发</strong></li></ul></li><li><strong>树莓派</strong><ul><li><strong>游戏系统</strong></li><li><strong>Kodi</strong></li><li><strong>Transmission(IO性能极差)</strong></li><li><strong>NAS(现已迁移到服务器)</strong></li><li><strong>HomeBridge(通过Siri控制家里的智能设备，包括灯和各种电器)</strong></li></ul></li><li><strong>有待挖掘的设备</strong><ul><li><strong>天猫精灵(配合博联网关实现控制传统家用电器和开关，设备太贵了，后期慢慢补充，现已完成Hass对接)</strong></li><li><strong>小爱同学(超全曲库的哄娃神器，控制小米系智能家居)</strong></li><li><strong>Apple TV 4K(作为HomeKit智能家居网关，目前我只是它来Air Play)</strong></li></ul></li></ul><h3 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h3><ul><li>邮箱：<a href="mailto:leezheng0815@gmail.com" target="_blank" rel="noopener">leezheng0815@gmail.com</a></li></ul>]]></content>
      
    </entry>
    
    
  
</search>
